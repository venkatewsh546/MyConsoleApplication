/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class NewDataSet : global::System.Data.DataSet {
    
    private claimEnrolleeFrequencyReportDataTable tableclaimEnrolleeFrequencyReport;
    
    private includedFileHeaderDataTable tableincludedFileHeader;
    
    private includedFileCountsCategoryDataTable tableincludedFileCountsCategory;
    
    private includedPlanCategoryDataTable tableincludedPlanCategory;
    
    private includedClaimCategoryDataTable tableincludedClaimCategory;
    
    private includedFormTypeCategoryDataTable tableincludedFormTypeCategory;
    
    private includedCalendarMonthCategoryDataTable tableincludedCalendarMonthCategory;
    
    private rariCommonOutboundFileHeaderDataTable tablerariCommonOutboundFileHeader;
    
    private global::System.Data.DataRelation relationclaimEnrolleeFrequencyReport_includedFileHeader;
    
    private global::System.Data.DataRelation relationclaimEnrolleeFrequencyReport_includedFileCountsCategory;
    
    private global::System.Data.DataRelation relationclaimEnrolleeFrequencyReport_includedPlanCategory;
    
    private global::System.Data.DataRelation relationincludedCalendarMonthCategory_includedClaimCategory;
    
    private global::System.Data.DataRelation relationincludedPlanCategory_includedClaimCategory;
    
    private global::System.Data.DataRelation relationclaimEnrolleeFrequencyReport_includedClaimCategory;
    
    private global::System.Data.DataRelation relationincludedClaimCategory_includedFormTypeCategory;
    
    private global::System.Data.DataRelation relationincludedPlanCategory_includedCalendarMonthCategory;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public NewDataSet() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["claimEnrolleeFrequencyReport"] != null)) {
                base.Tables.Add(new claimEnrolleeFrequencyReportDataTable(ds.Tables["claimEnrolleeFrequencyReport"]));
            }
            if ((ds.Tables["includedFileHeader"] != null)) {
                base.Tables.Add(new includedFileHeaderDataTable(ds.Tables["includedFileHeader"]));
            }
            if ((ds.Tables["includedFileCountsCategory"] != null)) {
                base.Tables.Add(new includedFileCountsCategoryDataTable(ds.Tables["includedFileCountsCategory"]));
            }
            if ((ds.Tables["includedPlanCategory"] != null)) {
                base.Tables.Add(new includedPlanCategoryDataTable(ds.Tables["includedPlanCategory"]));
            }
            if ((ds.Tables["includedClaimCategory"] != null)) {
                base.Tables.Add(new includedClaimCategoryDataTable(ds.Tables["includedClaimCategory"]));
            }
            if ((ds.Tables["includedFormTypeCategory"] != null)) {
                base.Tables.Add(new includedFormTypeCategoryDataTable(ds.Tables["includedFormTypeCategory"]));
            }
            if ((ds.Tables["includedCalendarMonthCategory"] != null)) {
                base.Tables.Add(new includedCalendarMonthCategoryDataTable(ds.Tables["includedCalendarMonthCategory"]));
            }
            if ((ds.Tables["rariCommonOutboundFileHeader"] != null)) {
                base.Tables.Add(new rariCommonOutboundFileHeaderDataTable(ds.Tables["rariCommonOutboundFileHeader"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public claimEnrolleeFrequencyReportDataTable claimEnrolleeFrequencyReport {
        get {
            return this.tableclaimEnrolleeFrequencyReport;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public includedFileHeaderDataTable includedFileHeader {
        get {
            return this.tableincludedFileHeader;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public includedFileCountsCategoryDataTable includedFileCountsCategory {
        get {
            return this.tableincludedFileCountsCategory;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public includedPlanCategoryDataTable includedPlanCategory {
        get {
            return this.tableincludedPlanCategory;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public includedClaimCategoryDataTable includedClaimCategory {
        get {
            return this.tableincludedClaimCategory;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public includedFormTypeCategoryDataTable includedFormTypeCategory {
        get {
            return this.tableincludedFormTypeCategory;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public includedCalendarMonthCategoryDataTable includedCalendarMonthCategory {
        get {
            return this.tableincludedCalendarMonthCategory;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public rariCommonOutboundFileHeaderDataTable rariCommonOutboundFileHeader {
        get {
            return this.tablerariCommonOutboundFileHeader;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override global::System.Data.DataSet Clone() {
        NewDataSet cln = ((NewDataSet)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["claimEnrolleeFrequencyReport"] != null)) {
                base.Tables.Add(new claimEnrolleeFrequencyReportDataTable(ds.Tables["claimEnrolleeFrequencyReport"]));
            }
            if ((ds.Tables["includedFileHeader"] != null)) {
                base.Tables.Add(new includedFileHeaderDataTable(ds.Tables["includedFileHeader"]));
            }
            if ((ds.Tables["includedFileCountsCategory"] != null)) {
                base.Tables.Add(new includedFileCountsCategoryDataTable(ds.Tables["includedFileCountsCategory"]));
            }
            if ((ds.Tables["includedPlanCategory"] != null)) {
                base.Tables.Add(new includedPlanCategoryDataTable(ds.Tables["includedPlanCategory"]));
            }
            if ((ds.Tables["includedClaimCategory"] != null)) {
                base.Tables.Add(new includedClaimCategoryDataTable(ds.Tables["includedClaimCategory"]));
            }
            if ((ds.Tables["includedFormTypeCategory"] != null)) {
                base.Tables.Add(new includedFormTypeCategoryDataTable(ds.Tables["includedFormTypeCategory"]));
            }
            if ((ds.Tables["includedCalendarMonthCategory"] != null)) {
                base.Tables.Add(new includedCalendarMonthCategoryDataTable(ds.Tables["includedCalendarMonthCategory"]));
            }
            if ((ds.Tables["rariCommonOutboundFileHeader"] != null)) {
                base.Tables.Add(new rariCommonOutboundFileHeaderDataTable(ds.Tables["rariCommonOutboundFileHeader"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable) {
        this.tableclaimEnrolleeFrequencyReport = ((claimEnrolleeFrequencyReportDataTable)(base.Tables["claimEnrolleeFrequencyReport"]));
        if ((initTable == true)) {
            if ((this.tableclaimEnrolleeFrequencyReport != null)) {
                this.tableclaimEnrolleeFrequencyReport.InitVars();
            }
        }
        this.tableincludedFileHeader = ((includedFileHeaderDataTable)(base.Tables["includedFileHeader"]));
        if ((initTable == true)) {
            if ((this.tableincludedFileHeader != null)) {
                this.tableincludedFileHeader.InitVars();
            }
        }
        this.tableincludedFileCountsCategory = ((includedFileCountsCategoryDataTable)(base.Tables["includedFileCountsCategory"]));
        if ((initTable == true)) {
            if ((this.tableincludedFileCountsCategory != null)) {
                this.tableincludedFileCountsCategory.InitVars();
            }
        }
        this.tableincludedPlanCategory = ((includedPlanCategoryDataTable)(base.Tables["includedPlanCategory"]));
        if ((initTable == true)) {
            if ((this.tableincludedPlanCategory != null)) {
                this.tableincludedPlanCategory.InitVars();
            }
        }
        this.tableincludedClaimCategory = ((includedClaimCategoryDataTable)(base.Tables["includedClaimCategory"]));
        if ((initTable == true)) {
            if ((this.tableincludedClaimCategory != null)) {
                this.tableincludedClaimCategory.InitVars();
            }
        }
        this.tableincludedFormTypeCategory = ((includedFormTypeCategoryDataTable)(base.Tables["includedFormTypeCategory"]));
        if ((initTable == true)) {
            if ((this.tableincludedFormTypeCategory != null)) {
                this.tableincludedFormTypeCategory.InitVars();
            }
        }
        this.tableincludedCalendarMonthCategory = ((includedCalendarMonthCategoryDataTable)(base.Tables["includedCalendarMonthCategory"]));
        if ((initTable == true)) {
            if ((this.tableincludedCalendarMonthCategory != null)) {
                this.tableincludedCalendarMonthCategory.InitVars();
            }
        }
        this.tablerariCommonOutboundFileHeader = ((rariCommonOutboundFileHeaderDataTable)(base.Tables["rariCommonOutboundFileHeader"]));
        if ((initTable == true)) {
            if ((this.tablerariCommonOutboundFileHeader != null)) {
                this.tablerariCommonOutboundFileHeader.InitVars();
            }
        }
        this.relationclaimEnrolleeFrequencyReport_includedFileHeader = this.Relations["claimEnrolleeFrequencyReport_includedFileHeader"];
        this.relationclaimEnrolleeFrequencyReport_includedFileCountsCategory = this.Relations["claimEnrolleeFrequencyReport_includedFileCountsCategory"];
        this.relationclaimEnrolleeFrequencyReport_includedPlanCategory = this.Relations["claimEnrolleeFrequencyReport_includedPlanCategory"];
        this.relationincludedCalendarMonthCategory_includedClaimCategory = this.Relations["includedCalendarMonthCategory_includedClaimCategory"];
        this.relationincludedPlanCategory_includedClaimCategory = this.Relations["includedPlanCategory_includedClaimCategory"];
        this.relationclaimEnrolleeFrequencyReport_includedClaimCategory = this.Relations["claimEnrolleeFrequencyReport_includedClaimCategory"];
        this.relationincludedClaimCategory_includedFormTypeCategory = this.Relations["includedClaimCategory_includedFormTypeCategory"];
        this.relationincludedPlanCategory_includedCalendarMonthCategory = this.Relations["includedPlanCategory_includedCalendarMonthCategory"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass() {
        this.DataSetName = "NewDataSet";
        this.Prefix = "";
        this.Namespace = "http://vo.edge.fm.cms.hhs.gov";
        this.Locale = new global::System.Globalization.CultureInfo("");
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableclaimEnrolleeFrequencyReport = new claimEnrolleeFrequencyReportDataTable();
        base.Tables.Add(this.tableclaimEnrolleeFrequencyReport);
        this.tableincludedFileHeader = new includedFileHeaderDataTable();
        base.Tables.Add(this.tableincludedFileHeader);
        this.tableincludedFileCountsCategory = new includedFileCountsCategoryDataTable();
        base.Tables.Add(this.tableincludedFileCountsCategory);
        this.tableincludedPlanCategory = new includedPlanCategoryDataTable();
        base.Tables.Add(this.tableincludedPlanCategory);
        this.tableincludedClaimCategory = new includedClaimCategoryDataTable();
        base.Tables.Add(this.tableincludedClaimCategory);
        this.tableincludedFormTypeCategory = new includedFormTypeCategoryDataTable();
        base.Tables.Add(this.tableincludedFormTypeCategory);
        this.tableincludedCalendarMonthCategory = new includedCalendarMonthCategoryDataTable();
        base.Tables.Add(this.tableincludedCalendarMonthCategory);
        this.tablerariCommonOutboundFileHeader = new rariCommonOutboundFileHeaderDataTable();
        base.Tables.Add(this.tablerariCommonOutboundFileHeader);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("claimEnrolleeFrequencyReport_includedFileHeader", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedFileHeader.claimEnrolleeFrequencyReport_IdColumn});
        this.tableincludedFileHeader.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("claimEnrolleeFrequencyReport_includedFileCountsCategory", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedFileCountsCategory.claimEnrolleeFrequencyReport_IdColumn});
        this.tableincludedFileCountsCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("claimEnrolleeFrequencyReport_includedPlanCategory", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedPlanCategory.claimEnrolleeFrequencyReport_IdColumn});
        this.tableincludedPlanCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("includedCalendarMonthCategory_includedClaimCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedCalendarMonthCategory.includedCalendarMonthCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.includedCalendarMonthCategory_IdColumn});
        this.tableincludedClaimCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("includedPlanCategory_includedClaimCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedPlanCategory.includedPlanCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.includedPlanCategory_IdColumn});
        this.tableincludedClaimCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("claimEnrolleeFrequencyReport_includedClaimCategory", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.claimEnrolleeFrequencyReport_IdColumn});
        this.tableincludedClaimCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("includedClaimCategory_includedFormTypeCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.includedClaimCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedFormTypeCategory.includedClaimCategory_IdColumn});
        this.tableincludedFormTypeCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("includedPlanCategory_includedCalendarMonthCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedPlanCategory.includedPlanCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedCalendarMonthCategory.includedPlanCategory_IdColumn});
        this.tableincludedCalendarMonthCategory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationclaimEnrolleeFrequencyReport_includedFileHeader = new global::System.Data.DataRelation("claimEnrolleeFrequencyReport_includedFileHeader", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedFileHeader.claimEnrolleeFrequencyReport_IdColumn}, false);
        this.relationclaimEnrolleeFrequencyReport_includedFileHeader.Nested = true;
        this.Relations.Add(this.relationclaimEnrolleeFrequencyReport_includedFileHeader);
        this.relationclaimEnrolleeFrequencyReport_includedFileCountsCategory = new global::System.Data.DataRelation("claimEnrolleeFrequencyReport_includedFileCountsCategory", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedFileCountsCategory.claimEnrolleeFrequencyReport_IdColumn}, false);
        this.relationclaimEnrolleeFrequencyReport_includedFileCountsCategory.Nested = true;
        this.Relations.Add(this.relationclaimEnrolleeFrequencyReport_includedFileCountsCategory);
        this.relationclaimEnrolleeFrequencyReport_includedPlanCategory = new global::System.Data.DataRelation("claimEnrolleeFrequencyReport_includedPlanCategory", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedPlanCategory.claimEnrolleeFrequencyReport_IdColumn}, false);
        this.relationclaimEnrolleeFrequencyReport_includedPlanCategory.Nested = true;
        this.Relations.Add(this.relationclaimEnrolleeFrequencyReport_includedPlanCategory);
        this.relationincludedCalendarMonthCategory_includedClaimCategory = new global::System.Data.DataRelation("includedCalendarMonthCategory_includedClaimCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedCalendarMonthCategory.includedCalendarMonthCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.includedCalendarMonthCategory_IdColumn}, false);
        this.relationincludedCalendarMonthCategory_includedClaimCategory.Nested = true;
        this.Relations.Add(this.relationincludedCalendarMonthCategory_includedClaimCategory);
        this.relationincludedPlanCategory_includedClaimCategory = new global::System.Data.DataRelation("includedPlanCategory_includedClaimCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedPlanCategory.includedPlanCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.includedPlanCategory_IdColumn}, false);
        this.relationincludedPlanCategory_includedClaimCategory.Nested = true;
        this.Relations.Add(this.relationincludedPlanCategory_includedClaimCategory);
        this.relationclaimEnrolleeFrequencyReport_includedClaimCategory = new global::System.Data.DataRelation("claimEnrolleeFrequencyReport_includedClaimCategory", new global::System.Data.DataColumn[] {
                    this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.claimEnrolleeFrequencyReport_IdColumn}, false);
        this.relationclaimEnrolleeFrequencyReport_includedClaimCategory.Nested = true;
        this.Relations.Add(this.relationclaimEnrolleeFrequencyReport_includedClaimCategory);
        this.relationincludedClaimCategory_includedFormTypeCategory = new global::System.Data.DataRelation("includedClaimCategory_includedFormTypeCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedClaimCategory.includedClaimCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedFormTypeCategory.includedClaimCategory_IdColumn}, false);
        this.relationincludedClaimCategory_includedFormTypeCategory.Nested = true;
        this.Relations.Add(this.relationincludedClaimCategory_includedFormTypeCategory);
        this.relationincludedPlanCategory_includedCalendarMonthCategory = new global::System.Data.DataRelation("includedPlanCategory_includedCalendarMonthCategory", new global::System.Data.DataColumn[] {
                    this.tableincludedPlanCategory.includedPlanCategory_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableincludedCalendarMonthCategory.includedPlanCategory_IdColumn}, false);
        this.relationincludedPlanCategory_includedCalendarMonthCategory.Nested = true;
        this.Relations.Add(this.relationincludedPlanCategory_includedCalendarMonthCategory);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeclaimEnrolleeFrequencyReport() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeincludedFileHeader() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeincludedFileCountsCategory() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeincludedPlanCategory() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeincludedClaimCategory() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeincludedFormTypeCategory() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeincludedCalendarMonthCategory() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializerariCommonOutboundFileHeader() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        NewDataSet ds = new NewDataSet();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void claimEnrolleeFrequencyReportRowChangeEventHandler(object sender, claimEnrolleeFrequencyReportRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void includedFileHeaderRowChangeEventHandler(object sender, includedFileHeaderRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void includedFileCountsCategoryRowChangeEventHandler(object sender, includedFileCountsCategoryRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void includedPlanCategoryRowChangeEventHandler(object sender, includedPlanCategoryRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void includedClaimCategoryRowChangeEventHandler(object sender, includedClaimCategoryRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void includedFormTypeCategoryRowChangeEventHandler(object sender, includedFormTypeCategoryRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void includedCalendarMonthCategoryRowChangeEventHandler(object sender, includedCalendarMonthCategoryRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void rariCommonOutboundFileHeaderRowChangeEventHandler(object sender, rariCommonOutboundFileHeaderRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class claimEnrolleeFrequencyReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columncalendarYear;
        
        private global::System.Data.DataColumn columnissuerLegalName;
        
        private global::System.Data.DataColumn columnstate;
        
        private global::System.Data.DataColumn columntotalEnrollees;
        
        private global::System.Data.DataColumn columntotalEnrolleeUtilizers;
        
        private global::System.Data.DataColumn columnmaleEnrolleeUtilizers;
        
        private global::System.Data.DataColumn columnfemaleEnrolleeUtilizers;
        
        private global::System.Data.DataColumn columntotalClaims;
        
        private global::System.Data.DataColumn columntotalEnrolleesWithMedicalClaims;
        
        private global::System.Data.DataColumn columntotalEnrolleesWithPharmacyClaims;
        
        private global::System.Data.DataColumn columnnumberOfEnrolleesWithMedicalPharmacyClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForAllClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForInpatientClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForOutpatientClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForProfessionalClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForPharmacyClaims;
        
        private global::System.Data.DataColumn columntotalPaidAmountForAllClaims;
        
        private global::System.Data.DataColumn columntotalPaidAmountForInpatientClaims;
        
        private global::System.Data.DataColumn columntotalPaidAmountForOutpatientClaims;
        
        private global::System.Data.DataColumn columntotalPaidAmountForProfessionalClaims;
        
        private global::System.Data.DataColumn columntotalPaidAmountForPharmacyClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForRaInpatientClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForRaOutpatientClaims;
        
        private global::System.Data.DataColumn columntotalPlanPaidAmountForRaInpatientClaims;
        
        private global::System.Data.DataColumn columntotalPlanPaidAmountForRaOutpatientClaims;
        
        private global::System.Data.DataColumn columnclaimEnrolleeFrequencyReport_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportDataTable() {
            this.TableName = "claimEnrolleeFrequencyReport";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal claimEnrolleeFrequencyReportDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected claimEnrolleeFrequencyReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn calendarYearColumn {
            get {
                return this.columncalendarYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn issuerLegalNameColumn {
            get {
                return this.columnissuerLegalName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn stateColumn {
            get {
                return this.columnstate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalEnrolleesColumn {
            get {
                return this.columntotalEnrollees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalEnrolleeUtilizersColumn {
            get {
                return this.columntotalEnrolleeUtilizers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn maleEnrolleeUtilizersColumn {
            get {
                return this.columnmaleEnrolleeUtilizers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn femaleEnrolleeUtilizersColumn {
            get {
                return this.columnfemaleEnrolleeUtilizers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalClaimsColumn {
            get {
                return this.columntotalClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalEnrolleesWithMedicalClaimsColumn {
            get {
                return this.columntotalEnrolleesWithMedicalClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalEnrolleesWithPharmacyClaimsColumn {
            get {
                return this.columntotalEnrolleesWithPharmacyClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn numberOfEnrolleesWithMedicalPharmacyClaimsColumn {
            get {
                return this.columnnumberOfEnrolleesWithMedicalPharmacyClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForAllClaimsColumn {
            get {
                return this.columntotalAllowedCostForAllClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForInpatientClaimsColumn {
            get {
                return this.columntotalAllowedCostForInpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForOutpatientClaimsColumn {
            get {
                return this.columntotalAllowedCostForOutpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForProfessionalClaimsColumn {
            get {
                return this.columntotalAllowedCostForProfessionalClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForPharmacyClaimsColumn {
            get {
                return this.columntotalAllowedCostForPharmacyClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPaidAmountForAllClaimsColumn {
            get {
                return this.columntotalPaidAmountForAllClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPaidAmountForInpatientClaimsColumn {
            get {
                return this.columntotalPaidAmountForInpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPaidAmountForOutpatientClaimsColumn {
            get {
                return this.columntotalPaidAmountForOutpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPaidAmountForProfessionalClaimsColumn {
            get {
                return this.columntotalPaidAmountForProfessionalClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPaidAmountForPharmacyClaimsColumn {
            get {
                return this.columntotalPaidAmountForPharmacyClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForRaInpatientClaimsColumn {
            get {
                return this.columntotalAllowedCostForRaInpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForRaOutpatientClaimsColumn {
            get {
                return this.columntotalAllowedCostForRaOutpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPlanPaidAmountForRaInpatientClaimsColumn {
            get {
                return this.columntotalPlanPaidAmountForRaInpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPlanPaidAmountForRaOutpatientClaimsColumn {
            get {
                return this.columntotalPlanPaidAmountForRaOutpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn claimEnrolleeFrequencyReport_IdColumn {
            get {
                return this.columnclaimEnrolleeFrequencyReport_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow this[int index] {
            get {
                return ((claimEnrolleeFrequencyReportRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event claimEnrolleeFrequencyReportRowChangeEventHandler claimEnrolleeFrequencyReportRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event claimEnrolleeFrequencyReportRowChangeEventHandler claimEnrolleeFrequencyReportRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event claimEnrolleeFrequencyReportRowChangeEventHandler claimEnrolleeFrequencyReportRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event claimEnrolleeFrequencyReportRowChangeEventHandler claimEnrolleeFrequencyReportRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddclaimEnrolleeFrequencyReportRow(claimEnrolleeFrequencyReportRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow AddclaimEnrolleeFrequencyReportRow(
                    string calendarYear, 
                    string issuerLegalName, 
                    string state, 
                    long totalEnrollees, 
                    long totalEnrolleeUtilizers, 
                    long maleEnrolleeUtilizers, 
                    long femaleEnrolleeUtilizers, 
                    long totalClaims, 
                    long totalEnrolleesWithMedicalClaims, 
                    long totalEnrolleesWithPharmacyClaims, 
                    long numberOfEnrolleesWithMedicalPharmacyClaims, 
                    decimal totalAllowedCostForAllClaims, 
                    decimal totalAllowedCostForInpatientClaims, 
                    decimal totalAllowedCostForOutpatientClaims, 
                    decimal totalAllowedCostForProfessionalClaims, 
                    decimal totalAllowedCostForPharmacyClaims, 
                    decimal totalPaidAmountForAllClaims, 
                    decimal totalPaidAmountForInpatientClaims, 
                    decimal totalPaidAmountForOutpatientClaims, 
                    decimal totalPaidAmountForProfessionalClaims, 
                    decimal totalPaidAmountForPharmacyClaims, 
                    decimal totalAllowedCostForRaInpatientClaims, 
                    decimal totalAllowedCostForRaOutpatientClaims, 
                    decimal totalPlanPaidAmountForRaInpatientClaims, 
                    decimal totalPlanPaidAmountForRaOutpatientClaims) {
            claimEnrolleeFrequencyReportRow rowclaimEnrolleeFrequencyReportRow = ((claimEnrolleeFrequencyReportRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    calendarYear,
                    issuerLegalName,
                    state,
                    totalEnrollees,
                    totalEnrolleeUtilizers,
                    maleEnrolleeUtilizers,
                    femaleEnrolleeUtilizers,
                    totalClaims,
                    totalEnrolleesWithMedicalClaims,
                    totalEnrolleesWithPharmacyClaims,
                    numberOfEnrolleesWithMedicalPharmacyClaims,
                    totalAllowedCostForAllClaims,
                    totalAllowedCostForInpatientClaims,
                    totalAllowedCostForOutpatientClaims,
                    totalAllowedCostForProfessionalClaims,
                    totalAllowedCostForPharmacyClaims,
                    totalPaidAmountForAllClaims,
                    totalPaidAmountForInpatientClaims,
                    totalPaidAmountForOutpatientClaims,
                    totalPaidAmountForProfessionalClaims,
                    totalPaidAmountForPharmacyClaims,
                    totalAllowedCostForRaInpatientClaims,
                    totalAllowedCostForRaOutpatientClaims,
                    totalPlanPaidAmountForRaInpatientClaims,
                    totalPlanPaidAmountForRaOutpatientClaims,
                    null};
            rowclaimEnrolleeFrequencyReportRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowclaimEnrolleeFrequencyReportRow);
            return rowclaimEnrolleeFrequencyReportRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            claimEnrolleeFrequencyReportDataTable cln = ((claimEnrolleeFrequencyReportDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new claimEnrolleeFrequencyReportDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columncalendarYear = base.Columns["calendarYear"];
            this.columnissuerLegalName = base.Columns["issuerLegalName"];
            this.columnstate = base.Columns["state"];
            this.columntotalEnrollees = base.Columns["totalEnrollees"];
            this.columntotalEnrolleeUtilizers = base.Columns["totalEnrolleeUtilizers"];
            this.columnmaleEnrolleeUtilizers = base.Columns["maleEnrolleeUtilizers"];
            this.columnfemaleEnrolleeUtilizers = base.Columns["femaleEnrolleeUtilizers"];
            this.columntotalClaims = base.Columns["totalClaims"];
            this.columntotalEnrolleesWithMedicalClaims = base.Columns["totalEnrolleesWithMedicalClaims"];
            this.columntotalEnrolleesWithPharmacyClaims = base.Columns["totalEnrolleesWithPharmacyClaims"];
            this.columnnumberOfEnrolleesWithMedicalPharmacyClaims = base.Columns["numberOfEnrolleesWithMedicalPharmacyClaims"];
            this.columntotalAllowedCostForAllClaims = base.Columns["totalAllowedCostForAllClaims"];
            this.columntotalAllowedCostForInpatientClaims = base.Columns["totalAllowedCostForInpatientClaims"];
            this.columntotalAllowedCostForOutpatientClaims = base.Columns["totalAllowedCostForOutpatientClaims"];
            this.columntotalAllowedCostForProfessionalClaims = base.Columns["totalAllowedCostForProfessionalClaims"];
            this.columntotalAllowedCostForPharmacyClaims = base.Columns["totalAllowedCostForPharmacyClaims"];
            this.columntotalPaidAmountForAllClaims = base.Columns["totalPaidAmountForAllClaims"];
            this.columntotalPaidAmountForInpatientClaims = base.Columns["totalPaidAmountForInpatientClaims"];
            this.columntotalPaidAmountForOutpatientClaims = base.Columns["totalPaidAmountForOutpatientClaims"];
            this.columntotalPaidAmountForProfessionalClaims = base.Columns["totalPaidAmountForProfessionalClaims"];
            this.columntotalPaidAmountForPharmacyClaims = base.Columns["totalPaidAmountForPharmacyClaims"];
            this.columntotalAllowedCostForRaInpatientClaims = base.Columns["totalAllowedCostForRaInpatientClaims"];
            this.columntotalAllowedCostForRaOutpatientClaims = base.Columns["totalAllowedCostForRaOutpatientClaims"];
            this.columntotalPlanPaidAmountForRaInpatientClaims = base.Columns["totalPlanPaidAmountForRaInpatientClaims"];
            this.columntotalPlanPaidAmountForRaOutpatientClaims = base.Columns["totalPlanPaidAmountForRaOutpatientClaims"];
            this.columnclaimEnrolleeFrequencyReport_Id = base.Columns["claimEnrolleeFrequencyReport_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columncalendarYear = new global::System.Data.DataColumn("calendarYear", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncalendarYear);
            this.columnissuerLegalName = new global::System.Data.DataColumn("issuerLegalName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnissuerLegalName);
            this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnstate);
            this.columntotalEnrollees = new global::System.Data.DataColumn("totalEnrollees", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalEnrollees);
            this.columntotalEnrolleeUtilizers = new global::System.Data.DataColumn("totalEnrolleeUtilizers", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalEnrolleeUtilizers);
            this.columnmaleEnrolleeUtilizers = new global::System.Data.DataColumn("maleEnrolleeUtilizers", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnmaleEnrolleeUtilizers);
            this.columnfemaleEnrolleeUtilizers = new global::System.Data.DataColumn("femaleEnrolleeUtilizers", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnfemaleEnrolleeUtilizers);
            this.columntotalClaims = new global::System.Data.DataColumn("totalClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalClaims);
            this.columntotalEnrolleesWithMedicalClaims = new global::System.Data.DataColumn("totalEnrolleesWithMedicalClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalEnrolleesWithMedicalClaims);
            this.columntotalEnrolleesWithPharmacyClaims = new global::System.Data.DataColumn("totalEnrolleesWithPharmacyClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalEnrolleesWithPharmacyClaims);
            this.columnnumberOfEnrolleesWithMedicalPharmacyClaims = new global::System.Data.DataColumn("numberOfEnrolleesWithMedicalPharmacyClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnnumberOfEnrolleesWithMedicalPharmacyClaims);
            this.columntotalAllowedCostForAllClaims = new global::System.Data.DataColumn("totalAllowedCostForAllClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForAllClaims);
            this.columntotalAllowedCostForInpatientClaims = new global::System.Data.DataColumn("totalAllowedCostForInpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForInpatientClaims);
            this.columntotalAllowedCostForOutpatientClaims = new global::System.Data.DataColumn("totalAllowedCostForOutpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForOutpatientClaims);
            this.columntotalAllowedCostForProfessionalClaims = new global::System.Data.DataColumn("totalAllowedCostForProfessionalClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForProfessionalClaims);
            this.columntotalAllowedCostForPharmacyClaims = new global::System.Data.DataColumn("totalAllowedCostForPharmacyClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForPharmacyClaims);
            this.columntotalPaidAmountForAllClaims = new global::System.Data.DataColumn("totalPaidAmountForAllClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPaidAmountForAllClaims);
            this.columntotalPaidAmountForInpatientClaims = new global::System.Data.DataColumn("totalPaidAmountForInpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPaidAmountForInpatientClaims);
            this.columntotalPaidAmountForOutpatientClaims = new global::System.Data.DataColumn("totalPaidAmountForOutpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPaidAmountForOutpatientClaims);
            this.columntotalPaidAmountForProfessionalClaims = new global::System.Data.DataColumn("totalPaidAmountForProfessionalClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPaidAmountForProfessionalClaims);
            this.columntotalPaidAmountForPharmacyClaims = new global::System.Data.DataColumn("totalPaidAmountForPharmacyClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPaidAmountForPharmacyClaims);
            this.columntotalAllowedCostForRaInpatientClaims = new global::System.Data.DataColumn("totalAllowedCostForRaInpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForRaInpatientClaims);
            this.columntotalAllowedCostForRaOutpatientClaims = new global::System.Data.DataColumn("totalAllowedCostForRaOutpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForRaOutpatientClaims);
            this.columntotalPlanPaidAmountForRaInpatientClaims = new global::System.Data.DataColumn("totalPlanPaidAmountForRaInpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPlanPaidAmountForRaInpatientClaims);
            this.columntotalPlanPaidAmountForRaOutpatientClaims = new global::System.Data.DataColumn("totalPlanPaidAmountForRaOutpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPlanPaidAmountForRaOutpatientClaims);
            this.columnclaimEnrolleeFrequencyReport_Id = new global::System.Data.DataColumn("claimEnrolleeFrequencyReport_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnclaimEnrolleeFrequencyReport_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnclaimEnrolleeFrequencyReport_Id}, true));
            this.columncalendarYear.AllowDBNull = false;
            this.columnissuerLegalName.AllowDBNull = false;
            this.columnissuerLegalName.MaxLength = 80;
            this.columnstate.AllowDBNull = false;
            this.columnstate.MaxLength = 2;
            this.columntotalEnrollees.AllowDBNull = false;
            this.columntotalEnrolleeUtilizers.AllowDBNull = false;
            this.columnmaleEnrolleeUtilizers.AllowDBNull = false;
            this.columnfemaleEnrolleeUtilizers.AllowDBNull = false;
            this.columntotalClaims.AllowDBNull = false;
            this.columntotalEnrolleesWithMedicalClaims.AllowDBNull = false;
            this.columntotalEnrolleesWithPharmacyClaims.AllowDBNull = false;
            this.columnnumberOfEnrolleesWithMedicalPharmacyClaims.AllowDBNull = false;
            this.columntotalAllowedCostForAllClaims.AllowDBNull = false;
            this.columntotalAllowedCostForInpatientClaims.AllowDBNull = false;
            this.columntotalAllowedCostForOutpatientClaims.AllowDBNull = false;
            this.columntotalAllowedCostForProfessionalClaims.AllowDBNull = false;
            this.columntotalAllowedCostForPharmacyClaims.AllowDBNull = false;
            this.columntotalPaidAmountForAllClaims.AllowDBNull = false;
            this.columntotalPaidAmountForInpatientClaims.AllowDBNull = false;
            this.columntotalPaidAmountForOutpatientClaims.AllowDBNull = false;
            this.columntotalPaidAmountForProfessionalClaims.AllowDBNull = false;
            this.columntotalPaidAmountForPharmacyClaims.AllowDBNull = false;
            this.columnclaimEnrolleeFrequencyReport_Id.AutoIncrement = true;
            this.columnclaimEnrolleeFrequencyReport_Id.AllowDBNull = false;
            this.columnclaimEnrolleeFrequencyReport_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow NewclaimEnrolleeFrequencyReportRow() {
            return ((claimEnrolleeFrequencyReportRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new claimEnrolleeFrequencyReportRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(claimEnrolleeFrequencyReportRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.claimEnrolleeFrequencyReportRowChanged != null)) {
                this.claimEnrolleeFrequencyReportRowChanged(this, new claimEnrolleeFrequencyReportRowChangeEvent(((claimEnrolleeFrequencyReportRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.claimEnrolleeFrequencyReportRowChanging != null)) {
                this.claimEnrolleeFrequencyReportRowChanging(this, new claimEnrolleeFrequencyReportRowChangeEvent(((claimEnrolleeFrequencyReportRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.claimEnrolleeFrequencyReportRowDeleted != null)) {
                this.claimEnrolleeFrequencyReportRowDeleted(this, new claimEnrolleeFrequencyReportRowChangeEvent(((claimEnrolleeFrequencyReportRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.claimEnrolleeFrequencyReportRowDeleting != null)) {
                this.claimEnrolleeFrequencyReportRowDeleting(this, new claimEnrolleeFrequencyReportRowChangeEvent(((claimEnrolleeFrequencyReportRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveclaimEnrolleeFrequencyReportRow(claimEnrolleeFrequencyReportRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "claimEnrolleeFrequencyReportDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class includedFileHeaderDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnoutboundFileIdentifier;
        
        private global::System.Data.DataColumn columncmsBatchIdentifier;
        
        private global::System.Data.DataColumn columncmsJobIdentifier;
        
        private global::System.Data.DataColumn columnsnapShotFileName;
        
        private global::System.Data.DataColumn columnsnapShotFileHash;
        
        private global::System.Data.DataColumn columnoutboundFileGenerationDateTime;
        
        private global::System.Data.DataColumn columninterfaceControlReleaseNumber;
        
        private global::System.Data.DataColumn columnedgeServerVersion;
        
        private global::System.Data.DataColumn columnedgeServerProcessIdentifier;
        
        private global::System.Data.DataColumn columnoutboundFileTypeCode;
        
        private global::System.Data.DataColumn columnedgeServerIdentifier;
        
        private global::System.Data.DataColumn columnissuerIdentifier;
        
        private global::System.Data.DataColumn columnclaimEnrolleeFrequencyReport_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderDataTable() {
            this.TableName = "includedFileHeader";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedFileHeaderDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected includedFileHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn outboundFileIdentifierColumn {
            get {
                return this.columnoutboundFileIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn cmsBatchIdentifierColumn {
            get {
                return this.columncmsBatchIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn cmsJobIdentifierColumn {
            get {
                return this.columncmsJobIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn snapShotFileNameColumn {
            get {
                return this.columnsnapShotFileName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn snapShotFileHashColumn {
            get {
                return this.columnsnapShotFileHash;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn outboundFileGenerationDateTimeColumn {
            get {
                return this.columnoutboundFileGenerationDateTime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn interfaceControlReleaseNumberColumn {
            get {
                return this.columninterfaceControlReleaseNumber;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn edgeServerVersionColumn {
            get {
                return this.columnedgeServerVersion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn edgeServerProcessIdentifierColumn {
            get {
                return this.columnedgeServerProcessIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn outboundFileTypeCodeColumn {
            get {
                return this.columnoutboundFileTypeCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn edgeServerIdentifierColumn {
            get {
                return this.columnedgeServerIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn issuerIdentifierColumn {
            get {
                return this.columnissuerIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn claimEnrolleeFrequencyReport_IdColumn {
            get {
                return this.columnclaimEnrolleeFrequencyReport_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderRow this[int index] {
            get {
                return ((includedFileHeaderRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileHeaderRowChangeEventHandler includedFileHeaderRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileHeaderRowChangeEventHandler includedFileHeaderRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileHeaderRowChangeEventHandler includedFileHeaderRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileHeaderRowChangeEventHandler includedFileHeaderRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddincludedFileHeaderRow(includedFileHeaderRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderRow AddincludedFileHeaderRow(string outboundFileIdentifier, string cmsBatchIdentifier, string cmsJobIdentifier, string snapShotFileName, string snapShotFileHash, string outboundFileGenerationDateTime, string interfaceControlReleaseNumber, string edgeServerVersion, string edgeServerProcessIdentifier, string outboundFileTypeCode, string edgeServerIdentifier, string issuerIdentifier, claimEnrolleeFrequencyReportRow parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedFileHeader) {
            includedFileHeaderRow rowincludedFileHeaderRow = ((includedFileHeaderRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    outboundFileIdentifier,
                    cmsBatchIdentifier,
                    cmsJobIdentifier,
                    snapShotFileName,
                    snapShotFileHash,
                    outboundFileGenerationDateTime,
                    interfaceControlReleaseNumber,
                    edgeServerVersion,
                    edgeServerProcessIdentifier,
                    outboundFileTypeCode,
                    edgeServerIdentifier,
                    issuerIdentifier,
                    null};
            if ((parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedFileHeader != null)) {
                columnValuesArray[12] = parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedFileHeader[25];
            }
            rowincludedFileHeaderRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowincludedFileHeaderRow);
            return rowincludedFileHeaderRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            includedFileHeaderDataTable cln = ((includedFileHeaderDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new includedFileHeaderDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnoutboundFileIdentifier = base.Columns["outboundFileIdentifier"];
            this.columncmsBatchIdentifier = base.Columns["cmsBatchIdentifier"];
            this.columncmsJobIdentifier = base.Columns["cmsJobIdentifier"];
            this.columnsnapShotFileName = base.Columns["snapShotFileName"];
            this.columnsnapShotFileHash = base.Columns["snapShotFileHash"];
            this.columnoutboundFileGenerationDateTime = base.Columns["outboundFileGenerationDateTime"];
            this.columninterfaceControlReleaseNumber = base.Columns["interfaceControlReleaseNumber"];
            this.columnedgeServerVersion = base.Columns["edgeServerVersion"];
            this.columnedgeServerProcessIdentifier = base.Columns["edgeServerProcessIdentifier"];
            this.columnoutboundFileTypeCode = base.Columns["outboundFileTypeCode"];
            this.columnedgeServerIdentifier = base.Columns["edgeServerIdentifier"];
            this.columnissuerIdentifier = base.Columns["issuerIdentifier"];
            this.columnclaimEnrolleeFrequencyReport_Id = base.Columns["claimEnrolleeFrequencyReport_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnoutboundFileIdentifier = new global::System.Data.DataColumn("outboundFileIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnoutboundFileIdentifier);
            this.columncmsBatchIdentifier = new global::System.Data.DataColumn("cmsBatchIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmsBatchIdentifier);
            this.columncmsJobIdentifier = new global::System.Data.DataColumn("cmsJobIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmsJobIdentifier);
            this.columnsnapShotFileName = new global::System.Data.DataColumn("snapShotFileName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsnapShotFileName);
            this.columnsnapShotFileHash = new global::System.Data.DataColumn("snapShotFileHash", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsnapShotFileHash);
            this.columnoutboundFileGenerationDateTime = new global::System.Data.DataColumn("outboundFileGenerationDateTime", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnoutboundFileGenerationDateTime);
            this.columninterfaceControlReleaseNumber = new global::System.Data.DataColumn("interfaceControlReleaseNumber", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columninterfaceControlReleaseNumber);
            this.columnedgeServerVersion = new global::System.Data.DataColumn("edgeServerVersion", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnedgeServerVersion);
            this.columnedgeServerProcessIdentifier = new global::System.Data.DataColumn("edgeServerProcessIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnedgeServerProcessIdentifier);
            this.columnoutboundFileTypeCode = new global::System.Data.DataColumn("outboundFileTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnoutboundFileTypeCode);
            this.columnedgeServerIdentifier = new global::System.Data.DataColumn("edgeServerIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnedgeServerIdentifier);
            this.columnissuerIdentifier = new global::System.Data.DataColumn("issuerIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnissuerIdentifier);
            this.columnclaimEnrolleeFrequencyReport_Id = new global::System.Data.DataColumn("claimEnrolleeFrequencyReport_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnclaimEnrolleeFrequencyReport_Id);
            this.columnoutboundFileIdentifier.AllowDBNull = false;
            this.columnoutboundFileIdentifier.MaxLength = 80;
            this.columncmsBatchIdentifier.AllowDBNull = false;
            this.columncmsBatchIdentifier.MaxLength = 50;
            this.columncmsJobIdentifier.AllowDBNull = false;
            this.columncmsJobIdentifier.MaxLength = 50;
            this.columnsnapShotFileName.AllowDBNull = false;
            this.columnsnapShotFileHash.AllowDBNull = false;
            this.columnoutboundFileGenerationDateTime.AllowDBNull = false;
            this.columninterfaceControlReleaseNumber.AllowDBNull = false;
            this.columnedgeServerVersion.AllowDBNull = false;
            this.columnedgeServerVersion.MaxLength = 75;
            this.columnedgeServerProcessIdentifier.MaxLength = 12;
            this.columnoutboundFileTypeCode.AllowDBNull = false;
            this.columnoutboundFileTypeCode.MaxLength = 30;
            this.columnedgeServerIdentifier.AllowDBNull = false;
            this.columnedgeServerIdentifier.MaxLength = 12;
            this.columnissuerIdentifier.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderRow NewincludedFileHeaderRow() {
            return ((includedFileHeaderRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new includedFileHeaderRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(includedFileHeaderRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.includedFileHeaderRowChanged != null)) {
                this.includedFileHeaderRowChanged(this, new includedFileHeaderRowChangeEvent(((includedFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.includedFileHeaderRowChanging != null)) {
                this.includedFileHeaderRowChanging(this, new includedFileHeaderRowChangeEvent(((includedFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.includedFileHeaderRowDeleted != null)) {
                this.includedFileHeaderRowDeleted(this, new includedFileHeaderRowChangeEvent(((includedFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.includedFileHeaderRowDeleting != null)) {
                this.includedFileHeaderRowDeleting(this, new includedFileHeaderRowChangeEvent(((includedFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveincludedFileHeaderRow(includedFileHeaderRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "includedFileHeaderDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class includedFileCountsCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnfileType;
        
        private global::System.Data.DataColumn columntotalNumberFilesReceived;
        
        private global::System.Data.DataColumn columntotalNumberFilesAccepted;
        
        private global::System.Data.DataColumn columntotalNumberFilesRejected;
        
        private global::System.Data.DataColumn columnclaimEnrolleeFrequencyReport_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryDataTable() {
            this.TableName = "includedFileCountsCategory";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedFileCountsCategoryDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected includedFileCountsCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn fileTypeColumn {
            get {
                return this.columnfileType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalNumberFilesReceivedColumn {
            get {
                return this.columntotalNumberFilesReceived;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalNumberFilesAcceptedColumn {
            get {
                return this.columntotalNumberFilesAccepted;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalNumberFilesRejectedColumn {
            get {
                return this.columntotalNumberFilesRejected;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn claimEnrolleeFrequencyReport_IdColumn {
            get {
                return this.columnclaimEnrolleeFrequencyReport_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryRow this[int index] {
            get {
                return ((includedFileCountsCategoryRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileCountsCategoryRowChangeEventHandler includedFileCountsCategoryRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileCountsCategoryRowChangeEventHandler includedFileCountsCategoryRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileCountsCategoryRowChangeEventHandler includedFileCountsCategoryRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFileCountsCategoryRowChangeEventHandler includedFileCountsCategoryRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddincludedFileCountsCategoryRow(includedFileCountsCategoryRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryRow AddincludedFileCountsCategoryRow(string fileType, long totalNumberFilesReceived, long totalNumberFilesAccepted, long totalNumberFilesRejected, claimEnrolleeFrequencyReportRow parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedFileCountsCategory) {
            includedFileCountsCategoryRow rowincludedFileCountsCategoryRow = ((includedFileCountsCategoryRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    fileType,
                    totalNumberFilesReceived,
                    totalNumberFilesAccepted,
                    totalNumberFilesRejected,
                    null};
            if ((parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedFileCountsCategory != null)) {
                columnValuesArray[4] = parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedFileCountsCategory[25];
            }
            rowincludedFileCountsCategoryRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowincludedFileCountsCategoryRow);
            return rowincludedFileCountsCategoryRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            includedFileCountsCategoryDataTable cln = ((includedFileCountsCategoryDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new includedFileCountsCategoryDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnfileType = base.Columns["fileType"];
            this.columntotalNumberFilesReceived = base.Columns["totalNumberFilesReceived"];
            this.columntotalNumberFilesAccepted = base.Columns["totalNumberFilesAccepted"];
            this.columntotalNumberFilesRejected = base.Columns["totalNumberFilesRejected"];
            this.columnclaimEnrolleeFrequencyReport_Id = base.Columns["claimEnrolleeFrequencyReport_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnfileType = new global::System.Data.DataColumn("fileType", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnfileType);
            this.columntotalNumberFilesReceived = new global::System.Data.DataColumn("totalNumberFilesReceived", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalNumberFilesReceived);
            this.columntotalNumberFilesAccepted = new global::System.Data.DataColumn("totalNumberFilesAccepted", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalNumberFilesAccepted);
            this.columntotalNumberFilesRejected = new global::System.Data.DataColumn("totalNumberFilesRejected", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalNumberFilesRejected);
            this.columnclaimEnrolleeFrequencyReport_Id = new global::System.Data.DataColumn("claimEnrolleeFrequencyReport_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnclaimEnrolleeFrequencyReport_Id);
            this.columnfileType.AllowDBNull = false;
            this.columnfileType.MaxLength = 1;
            this.columntotalNumberFilesReceived.AllowDBNull = false;
            this.columntotalNumberFilesAccepted.AllowDBNull = false;
            this.columntotalNumberFilesRejected.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryRow NewincludedFileCountsCategoryRow() {
            return ((includedFileCountsCategoryRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new includedFileCountsCategoryRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(includedFileCountsCategoryRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.includedFileCountsCategoryRowChanged != null)) {
                this.includedFileCountsCategoryRowChanged(this, new includedFileCountsCategoryRowChangeEvent(((includedFileCountsCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.includedFileCountsCategoryRowChanging != null)) {
                this.includedFileCountsCategoryRowChanging(this, new includedFileCountsCategoryRowChangeEvent(((includedFileCountsCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.includedFileCountsCategoryRowDeleted != null)) {
                this.includedFileCountsCategoryRowDeleted(this, new includedFileCountsCategoryRowChangeEvent(((includedFileCountsCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.includedFileCountsCategoryRowDeleting != null)) {
                this.includedFileCountsCategoryRowDeleting(this, new includedFileCountsCategoryRowChangeEvent(((includedFileCountsCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveincludedFileCountsCategoryRow(includedFileCountsCategoryRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "includedFileCountsCategoryDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class includedPlanCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnplanIdentifier;
        
        private global::System.Data.DataColumn columnincludedPlanCategory_Id;
        
        private global::System.Data.DataColumn columnclaimEnrolleeFrequencyReport_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryDataTable() {
            this.TableName = "includedPlanCategory";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedPlanCategoryDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected includedPlanCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn planIdentifierColumn {
            get {
                return this.columnplanIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedPlanCategory_IdColumn {
            get {
                return this.columnincludedPlanCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn claimEnrolleeFrequencyReport_IdColumn {
            get {
                return this.columnclaimEnrolleeFrequencyReport_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow this[int index] {
            get {
                return ((includedPlanCategoryRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedPlanCategoryRowChangeEventHandler includedPlanCategoryRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedPlanCategoryRowChangeEventHandler includedPlanCategoryRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedPlanCategoryRowChangeEventHandler includedPlanCategoryRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedPlanCategoryRowChangeEventHandler includedPlanCategoryRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddincludedPlanCategoryRow(includedPlanCategoryRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow AddincludedPlanCategoryRow(string planIdentifier, claimEnrolleeFrequencyReportRow parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedPlanCategory) {
            includedPlanCategoryRow rowincludedPlanCategoryRow = ((includedPlanCategoryRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    planIdentifier,
                    null,
                    null};
            if ((parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedPlanCategory != null)) {
                columnValuesArray[2] = parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedPlanCategory[25];
            }
            rowincludedPlanCategoryRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowincludedPlanCategoryRow);
            return rowincludedPlanCategoryRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            includedPlanCategoryDataTable cln = ((includedPlanCategoryDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new includedPlanCategoryDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnplanIdentifier = base.Columns["planIdentifier"];
            this.columnincludedPlanCategory_Id = base.Columns["includedPlanCategory_Id"];
            this.columnclaimEnrolleeFrequencyReport_Id = base.Columns["claimEnrolleeFrequencyReport_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnplanIdentifier = new global::System.Data.DataColumn("planIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnplanIdentifier);
            this.columnincludedPlanCategory_Id = new global::System.Data.DataColumn("includedPlanCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedPlanCategory_Id);
            this.columnclaimEnrolleeFrequencyReport_Id = new global::System.Data.DataColumn("claimEnrolleeFrequencyReport_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnclaimEnrolleeFrequencyReport_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnincludedPlanCategory_Id}, true));
            this.columnplanIdentifier.AllowDBNull = false;
            this.columnplanIdentifier.MaxLength = 16;
            this.columnincludedPlanCategory_Id.AutoIncrement = true;
            this.columnincludedPlanCategory_Id.AllowDBNull = false;
            this.columnincludedPlanCategory_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow NewincludedPlanCategoryRow() {
            return ((includedPlanCategoryRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new includedPlanCategoryRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(includedPlanCategoryRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.includedPlanCategoryRowChanged != null)) {
                this.includedPlanCategoryRowChanged(this, new includedPlanCategoryRowChangeEvent(((includedPlanCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.includedPlanCategoryRowChanging != null)) {
                this.includedPlanCategoryRowChanging(this, new includedPlanCategoryRowChangeEvent(((includedPlanCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.includedPlanCategoryRowDeleted != null)) {
                this.includedPlanCategoryRowDeleted(this, new includedPlanCategoryRowChangeEvent(((includedPlanCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.includedPlanCategoryRowDeleting != null)) {
                this.includedPlanCategoryRowDeleting(this, new includedPlanCategoryRowChangeEvent(((includedPlanCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveincludedPlanCategoryRow(includedPlanCategoryRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "includedPlanCategoryDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class includedClaimCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnclaimType;
        
        private global::System.Data.DataColumn columncountofTotalActiveClaims;
        
        private global::System.Data.DataColumn columncountofTotalInactiveVoidClaims;
        
        private global::System.Data.DataColumn columntotalClaimRecordsAccepted;
        
        private global::System.Data.DataColumn columnuniqueClaimRecordsResolved;
        
        private global::System.Data.DataColumn columntotalClaimLinesAccepted;
        
        private global::System.Data.DataColumn columntotalAllowedCostForRaInpatientClaims;
        
        private global::System.Data.DataColumn columntotalAllowedCostForRaOutpatientClaims;
        
        private global::System.Data.DataColumn columntotalPlanPaidAmountForRaInpatientClaims;
        
        private global::System.Data.DataColumn columntotalPlanPaidAmountForRaOutpatientClaims;
        
        private global::System.Data.DataColumn columnincludedClaimCategory_Id;
        
        private global::System.Data.DataColumn columnincludedCalendarMonthCategory_Id;
        
        private global::System.Data.DataColumn columnincludedPlanCategory_Id;
        
        private global::System.Data.DataColumn columnclaimEnrolleeFrequencyReport_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryDataTable() {
            this.TableName = "includedClaimCategory";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedClaimCategoryDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected includedClaimCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn claimTypeColumn {
            get {
                return this.columnclaimType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn countofTotalActiveClaimsColumn {
            get {
                return this.columncountofTotalActiveClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn countofTotalInactiveVoidClaimsColumn {
            get {
                return this.columncountofTotalInactiveVoidClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalClaimRecordsAcceptedColumn {
            get {
                return this.columntotalClaimRecordsAccepted;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn uniqueClaimRecordsResolvedColumn {
            get {
                return this.columnuniqueClaimRecordsResolved;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalClaimLinesAcceptedColumn {
            get {
                return this.columntotalClaimLinesAccepted;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForRaInpatientClaimsColumn {
            get {
                return this.columntotalAllowedCostForRaInpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalAllowedCostForRaOutpatientClaimsColumn {
            get {
                return this.columntotalAllowedCostForRaOutpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPlanPaidAmountForRaInpatientClaimsColumn {
            get {
                return this.columntotalPlanPaidAmountForRaInpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn totalPlanPaidAmountForRaOutpatientClaimsColumn {
            get {
                return this.columntotalPlanPaidAmountForRaOutpatientClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedClaimCategory_IdColumn {
            get {
                return this.columnincludedClaimCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedCalendarMonthCategory_IdColumn {
            get {
                return this.columnincludedCalendarMonthCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedPlanCategory_IdColumn {
            get {
                return this.columnincludedPlanCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn claimEnrolleeFrequencyReport_IdColumn {
            get {
                return this.columnclaimEnrolleeFrequencyReport_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow this[int index] {
            get {
                return ((includedClaimCategoryRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedClaimCategoryRowChangeEventHandler includedClaimCategoryRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedClaimCategoryRowChangeEventHandler includedClaimCategoryRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedClaimCategoryRowChangeEventHandler includedClaimCategoryRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedClaimCategoryRowChangeEventHandler includedClaimCategoryRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddincludedClaimCategoryRow(includedClaimCategoryRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow AddincludedClaimCategoryRow(string claimType, long countofTotalActiveClaims, long countofTotalInactiveVoidClaims, long totalClaimRecordsAccepted, long uniqueClaimRecordsResolved, long totalClaimLinesAccepted, decimal totalAllowedCostForRaInpatientClaims, decimal totalAllowedCostForRaOutpatientClaims, decimal totalPlanPaidAmountForRaInpatientClaims, decimal totalPlanPaidAmountForRaOutpatientClaims, includedCalendarMonthCategoryRow parentincludedCalendarMonthCategoryRowByincludedCalendarMonthCategory_includedClaimCategory, includedPlanCategoryRow parentincludedPlanCategoryRowByincludedPlanCategory_includedClaimCategory, claimEnrolleeFrequencyReportRow parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedClaimCategory) {
            includedClaimCategoryRow rowincludedClaimCategoryRow = ((includedClaimCategoryRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    claimType,
                    countofTotalActiveClaims,
                    countofTotalInactiveVoidClaims,
                    totalClaimRecordsAccepted,
                    uniqueClaimRecordsResolved,
                    totalClaimLinesAccepted,
                    totalAllowedCostForRaInpatientClaims,
                    totalAllowedCostForRaOutpatientClaims,
                    totalPlanPaidAmountForRaInpatientClaims,
                    totalPlanPaidAmountForRaOutpatientClaims,
                    null,
                    null,
                    null,
                    null};
            if ((parentincludedCalendarMonthCategoryRowByincludedCalendarMonthCategory_includedClaimCategory != null)) {
                columnValuesArray[11] = parentincludedCalendarMonthCategoryRowByincludedCalendarMonthCategory_includedClaimCategory[1];
            }
            if ((parentincludedPlanCategoryRowByincludedPlanCategory_includedClaimCategory != null)) {
                columnValuesArray[12] = parentincludedPlanCategoryRowByincludedPlanCategory_includedClaimCategory[1];
            }
            if ((parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedClaimCategory != null)) {
                columnValuesArray[13] = parentclaimEnrolleeFrequencyReportRowByclaimEnrolleeFrequencyReport_includedClaimCategory[25];
            }
            rowincludedClaimCategoryRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowincludedClaimCategoryRow);
            return rowincludedClaimCategoryRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            includedClaimCategoryDataTable cln = ((includedClaimCategoryDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new includedClaimCategoryDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnclaimType = base.Columns["claimType"];
            this.columncountofTotalActiveClaims = base.Columns["countofTotalActiveClaims"];
            this.columncountofTotalInactiveVoidClaims = base.Columns["countofTotalInactiveVoidClaims"];
            this.columntotalClaimRecordsAccepted = base.Columns["totalClaimRecordsAccepted"];
            this.columnuniqueClaimRecordsResolved = base.Columns["uniqueClaimRecordsResolved"];
            this.columntotalClaimLinesAccepted = base.Columns["totalClaimLinesAccepted"];
            this.columntotalAllowedCostForRaInpatientClaims = base.Columns["totalAllowedCostForRaInpatientClaims"];
            this.columntotalAllowedCostForRaOutpatientClaims = base.Columns["totalAllowedCostForRaOutpatientClaims"];
            this.columntotalPlanPaidAmountForRaInpatientClaims = base.Columns["totalPlanPaidAmountForRaInpatientClaims"];
            this.columntotalPlanPaidAmountForRaOutpatientClaims = base.Columns["totalPlanPaidAmountForRaOutpatientClaims"];
            this.columnincludedClaimCategory_Id = base.Columns["includedClaimCategory_Id"];
            this.columnincludedCalendarMonthCategory_Id = base.Columns["includedCalendarMonthCategory_Id"];
            this.columnincludedPlanCategory_Id = base.Columns["includedPlanCategory_Id"];
            this.columnclaimEnrolleeFrequencyReport_Id = base.Columns["claimEnrolleeFrequencyReport_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnclaimType = new global::System.Data.DataColumn("claimType", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnclaimType);
            this.columncountofTotalActiveClaims = new global::System.Data.DataColumn("countofTotalActiveClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncountofTotalActiveClaims);
            this.columncountofTotalInactiveVoidClaims = new global::System.Data.DataColumn("countofTotalInactiveVoidClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncountofTotalInactiveVoidClaims);
            this.columntotalClaimRecordsAccepted = new global::System.Data.DataColumn("totalClaimRecordsAccepted", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalClaimRecordsAccepted);
            this.columnuniqueClaimRecordsResolved = new global::System.Data.DataColumn("uniqueClaimRecordsResolved", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnuniqueClaimRecordsResolved);
            this.columntotalClaimLinesAccepted = new global::System.Data.DataColumn("totalClaimLinesAccepted", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalClaimLinesAccepted);
            this.columntotalAllowedCostForRaInpatientClaims = new global::System.Data.DataColumn("totalAllowedCostForRaInpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForRaInpatientClaims);
            this.columntotalAllowedCostForRaOutpatientClaims = new global::System.Data.DataColumn("totalAllowedCostForRaOutpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalAllowedCostForRaOutpatientClaims);
            this.columntotalPlanPaidAmountForRaInpatientClaims = new global::System.Data.DataColumn("totalPlanPaidAmountForRaInpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPlanPaidAmountForRaInpatientClaims);
            this.columntotalPlanPaidAmountForRaOutpatientClaims = new global::System.Data.DataColumn("totalPlanPaidAmountForRaOutpatientClaims", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntotalPlanPaidAmountForRaOutpatientClaims);
            this.columnincludedClaimCategory_Id = new global::System.Data.DataColumn("includedClaimCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedClaimCategory_Id);
            this.columnincludedCalendarMonthCategory_Id = new global::System.Data.DataColumn("includedCalendarMonthCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedCalendarMonthCategory_Id);
            this.columnincludedPlanCategory_Id = new global::System.Data.DataColumn("includedPlanCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedPlanCategory_Id);
            this.columnclaimEnrolleeFrequencyReport_Id = new global::System.Data.DataColumn("claimEnrolleeFrequencyReport_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnclaimEnrolleeFrequencyReport_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnincludedClaimCategory_Id}, true));
            this.columnclaimType.AllowDBNull = false;
            this.columnclaimType.MaxLength = 1;
            this.columncountofTotalActiveClaims.AllowDBNull = false;
            this.columncountofTotalInactiveVoidClaims.AllowDBNull = false;
            this.columntotalClaimRecordsAccepted.AllowDBNull = false;
            this.columnincludedClaimCategory_Id.AutoIncrement = true;
            this.columnincludedClaimCategory_Id.AllowDBNull = false;
            this.columnincludedClaimCategory_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow NewincludedClaimCategoryRow() {
            return ((includedClaimCategoryRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new includedClaimCategoryRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(includedClaimCategoryRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.includedClaimCategoryRowChanged != null)) {
                this.includedClaimCategoryRowChanged(this, new includedClaimCategoryRowChangeEvent(((includedClaimCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.includedClaimCategoryRowChanging != null)) {
                this.includedClaimCategoryRowChanging(this, new includedClaimCategoryRowChangeEvent(((includedClaimCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.includedClaimCategoryRowDeleted != null)) {
                this.includedClaimCategoryRowDeleted(this, new includedClaimCategoryRowChangeEvent(((includedClaimCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.includedClaimCategoryRowDeleting != null)) {
                this.includedClaimCategoryRowDeleting(this, new includedClaimCategoryRowChangeEvent(((includedClaimCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveincludedClaimCategoryRow(includedClaimCategoryRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "includedClaimCategoryDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class includedFormTypeCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnformType;
        
        private global::System.Data.DataColumn columncountofTotalActiveClaims;
        
        private global::System.Data.DataColumn columncountofTotalInactiveVoidClaims;
        
        private global::System.Data.DataColumn columnincludedClaimCategory_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryDataTable() {
            this.TableName = "includedFormTypeCategory";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedFormTypeCategoryDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected includedFormTypeCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn formTypeColumn {
            get {
                return this.columnformType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn countofTotalActiveClaimsColumn {
            get {
                return this.columncountofTotalActiveClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn countofTotalInactiveVoidClaimsColumn {
            get {
                return this.columncountofTotalInactiveVoidClaims;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedClaimCategory_IdColumn {
            get {
                return this.columnincludedClaimCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryRow this[int index] {
            get {
                return ((includedFormTypeCategoryRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFormTypeCategoryRowChangeEventHandler includedFormTypeCategoryRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFormTypeCategoryRowChangeEventHandler includedFormTypeCategoryRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFormTypeCategoryRowChangeEventHandler includedFormTypeCategoryRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedFormTypeCategoryRowChangeEventHandler includedFormTypeCategoryRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddincludedFormTypeCategoryRow(includedFormTypeCategoryRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryRow AddincludedFormTypeCategoryRow(string formType, long countofTotalActiveClaims, long countofTotalInactiveVoidClaims, includedClaimCategoryRow parentincludedClaimCategoryRowByincludedClaimCategory_includedFormTypeCategory) {
            includedFormTypeCategoryRow rowincludedFormTypeCategoryRow = ((includedFormTypeCategoryRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    formType,
                    countofTotalActiveClaims,
                    countofTotalInactiveVoidClaims,
                    null};
            if ((parentincludedClaimCategoryRowByincludedClaimCategory_includedFormTypeCategory != null)) {
                columnValuesArray[3] = parentincludedClaimCategoryRowByincludedClaimCategory_includedFormTypeCategory[10];
            }
            rowincludedFormTypeCategoryRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowincludedFormTypeCategoryRow);
            return rowincludedFormTypeCategoryRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            includedFormTypeCategoryDataTable cln = ((includedFormTypeCategoryDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new includedFormTypeCategoryDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnformType = base.Columns["formType"];
            this.columncountofTotalActiveClaims = base.Columns["countofTotalActiveClaims"];
            this.columncountofTotalInactiveVoidClaims = base.Columns["countofTotalInactiveVoidClaims"];
            this.columnincludedClaimCategory_Id = base.Columns["includedClaimCategory_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnformType = new global::System.Data.DataColumn("formType", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnformType);
            this.columncountofTotalActiveClaims = new global::System.Data.DataColumn("countofTotalActiveClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncountofTotalActiveClaims);
            this.columncountofTotalInactiveVoidClaims = new global::System.Data.DataColumn("countofTotalInactiveVoidClaims", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncountofTotalInactiveVoidClaims);
            this.columnincludedClaimCategory_Id = new global::System.Data.DataColumn("includedClaimCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedClaimCategory_Id);
            this.columnformType.MaxLength = 1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryRow NewincludedFormTypeCategoryRow() {
            return ((includedFormTypeCategoryRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new includedFormTypeCategoryRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(includedFormTypeCategoryRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.includedFormTypeCategoryRowChanged != null)) {
                this.includedFormTypeCategoryRowChanged(this, new includedFormTypeCategoryRowChangeEvent(((includedFormTypeCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.includedFormTypeCategoryRowChanging != null)) {
                this.includedFormTypeCategoryRowChanging(this, new includedFormTypeCategoryRowChangeEvent(((includedFormTypeCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.includedFormTypeCategoryRowDeleted != null)) {
                this.includedFormTypeCategoryRowDeleted(this, new includedFormTypeCategoryRowChangeEvent(((includedFormTypeCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.includedFormTypeCategoryRowDeleting != null)) {
                this.includedFormTypeCategoryRowDeleting(this, new includedFormTypeCategoryRowChangeEvent(((includedFormTypeCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveincludedFormTypeCategoryRow(includedFormTypeCategoryRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "includedFormTypeCategoryDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class includedCalendarMonthCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columncalendarMonth;
        
        private global::System.Data.DataColumn columnincludedCalendarMonthCategory_Id;
        
        private global::System.Data.DataColumn columnincludedPlanCategory_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryDataTable() {
            this.TableName = "includedCalendarMonthCategory";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedCalendarMonthCategoryDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected includedCalendarMonthCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn calendarMonthColumn {
            get {
                return this.columncalendarMonth;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedCalendarMonthCategory_IdColumn {
            get {
                return this.columnincludedCalendarMonthCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn includedPlanCategory_IdColumn {
            get {
                return this.columnincludedPlanCategory_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRow this[int index] {
            get {
                return ((includedCalendarMonthCategoryRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedCalendarMonthCategoryRowChangeEventHandler includedCalendarMonthCategoryRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedCalendarMonthCategoryRowChangeEventHandler includedCalendarMonthCategoryRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedCalendarMonthCategoryRowChangeEventHandler includedCalendarMonthCategoryRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event includedCalendarMonthCategoryRowChangeEventHandler includedCalendarMonthCategoryRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddincludedCalendarMonthCategoryRow(includedCalendarMonthCategoryRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRow AddincludedCalendarMonthCategoryRow(string calendarMonth, includedPlanCategoryRow parentincludedPlanCategoryRowByincludedPlanCategory_includedCalendarMonthCategory) {
            includedCalendarMonthCategoryRow rowincludedCalendarMonthCategoryRow = ((includedCalendarMonthCategoryRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    calendarMonth,
                    null,
                    null};
            if ((parentincludedPlanCategoryRowByincludedPlanCategory_includedCalendarMonthCategory != null)) {
                columnValuesArray[2] = parentincludedPlanCategoryRowByincludedPlanCategory_includedCalendarMonthCategory[1];
            }
            rowincludedCalendarMonthCategoryRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowincludedCalendarMonthCategoryRow);
            return rowincludedCalendarMonthCategoryRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            includedCalendarMonthCategoryDataTable cln = ((includedCalendarMonthCategoryDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new includedCalendarMonthCategoryDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columncalendarMonth = base.Columns["calendarMonth"];
            this.columnincludedCalendarMonthCategory_Id = base.Columns["includedCalendarMonthCategory_Id"];
            this.columnincludedPlanCategory_Id = base.Columns["includedPlanCategory_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columncalendarMonth = new global::System.Data.DataColumn("calendarMonth", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncalendarMonth);
            this.columnincludedCalendarMonthCategory_Id = new global::System.Data.DataColumn("includedCalendarMonthCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedCalendarMonthCategory_Id);
            this.columnincludedPlanCategory_Id = new global::System.Data.DataColumn("includedPlanCategory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnincludedPlanCategory_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnincludedCalendarMonthCategory_Id}, true));
            this.columncalendarMonth.AllowDBNull = false;
            this.columncalendarMonth.MaxLength = 2;
            this.columnincludedCalendarMonthCategory_Id.AutoIncrement = true;
            this.columnincludedCalendarMonthCategory_Id.AllowDBNull = false;
            this.columnincludedCalendarMonthCategory_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRow NewincludedCalendarMonthCategoryRow() {
            return ((includedCalendarMonthCategoryRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new includedCalendarMonthCategoryRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(includedCalendarMonthCategoryRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.includedCalendarMonthCategoryRowChanged != null)) {
                this.includedCalendarMonthCategoryRowChanged(this, new includedCalendarMonthCategoryRowChangeEvent(((includedCalendarMonthCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.includedCalendarMonthCategoryRowChanging != null)) {
                this.includedCalendarMonthCategoryRowChanging(this, new includedCalendarMonthCategoryRowChangeEvent(((includedCalendarMonthCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.includedCalendarMonthCategoryRowDeleted != null)) {
                this.includedCalendarMonthCategoryRowDeleted(this, new includedCalendarMonthCategoryRowChangeEvent(((includedCalendarMonthCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.includedCalendarMonthCategoryRowDeleting != null)) {
                this.includedCalendarMonthCategoryRowDeleting(this, new includedCalendarMonthCategoryRowChangeEvent(((includedCalendarMonthCategoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveincludedCalendarMonthCategoryRow(includedCalendarMonthCategoryRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "includedCalendarMonthCategoryDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class rariCommonOutboundFileHeaderDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnoutboundFileIdentifier;
        
        private global::System.Data.DataColumn columncmsBatchIdentifier;
        
        private global::System.Data.DataColumn columncmsJobIdentifier;
        
        private global::System.Data.DataColumn columnsnapShotFileName;
        
        private global::System.Data.DataColumn columnsnapShotFileHash;
        
        private global::System.Data.DataColumn columnoutboundFileGenerationDateTime;
        
        private global::System.Data.DataColumn columninterfaceControlReleaseNumber;
        
        private global::System.Data.DataColumn columnedgeServerVersion;
        
        private global::System.Data.DataColumn columnedgeServerProcessIdentifier;
        
        private global::System.Data.DataColumn columnoutboundFileTypeCode;
        
        private global::System.Data.DataColumn columnedgeServerIdentifier;
        
        private global::System.Data.DataColumn columnissuerIdentifier;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public rariCommonOutboundFileHeaderDataTable() {
            this.TableName = "rariCommonOutboundFileHeader";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal rariCommonOutboundFileHeaderDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected rariCommonOutboundFileHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn outboundFileIdentifierColumn {
            get {
                return this.columnoutboundFileIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn cmsBatchIdentifierColumn {
            get {
                return this.columncmsBatchIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn cmsJobIdentifierColumn {
            get {
                return this.columncmsJobIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn snapShotFileNameColumn {
            get {
                return this.columnsnapShotFileName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn snapShotFileHashColumn {
            get {
                return this.columnsnapShotFileHash;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn outboundFileGenerationDateTimeColumn {
            get {
                return this.columnoutboundFileGenerationDateTime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn interfaceControlReleaseNumberColumn {
            get {
                return this.columninterfaceControlReleaseNumber;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn edgeServerVersionColumn {
            get {
                return this.columnedgeServerVersion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn edgeServerProcessIdentifierColumn {
            get {
                return this.columnedgeServerProcessIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn outboundFileTypeCodeColumn {
            get {
                return this.columnoutboundFileTypeCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn edgeServerIdentifierColumn {
            get {
                return this.columnedgeServerIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn issuerIdentifierColumn {
            get {
                return this.columnissuerIdentifier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public rariCommonOutboundFileHeaderRow this[int index] {
            get {
                return ((rariCommonOutboundFileHeaderRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event rariCommonOutboundFileHeaderRowChangeEventHandler rariCommonOutboundFileHeaderRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event rariCommonOutboundFileHeaderRowChangeEventHandler rariCommonOutboundFileHeaderRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event rariCommonOutboundFileHeaderRowChangeEventHandler rariCommonOutboundFileHeaderRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event rariCommonOutboundFileHeaderRowChangeEventHandler rariCommonOutboundFileHeaderRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddrariCommonOutboundFileHeaderRow(rariCommonOutboundFileHeaderRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public rariCommonOutboundFileHeaderRow AddrariCommonOutboundFileHeaderRow(string outboundFileIdentifier, string cmsBatchIdentifier, string cmsJobIdentifier, string snapShotFileName, string snapShotFileHash, string outboundFileGenerationDateTime, string interfaceControlReleaseNumber, string edgeServerVersion, string edgeServerProcessIdentifier, string outboundFileTypeCode, string edgeServerIdentifier, string issuerIdentifier) {
            rariCommonOutboundFileHeaderRow rowrariCommonOutboundFileHeaderRow = ((rariCommonOutboundFileHeaderRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    outboundFileIdentifier,
                    cmsBatchIdentifier,
                    cmsJobIdentifier,
                    snapShotFileName,
                    snapShotFileHash,
                    outboundFileGenerationDateTime,
                    interfaceControlReleaseNumber,
                    edgeServerVersion,
                    edgeServerProcessIdentifier,
                    outboundFileTypeCode,
                    edgeServerIdentifier,
                    issuerIdentifier};
            rowrariCommonOutboundFileHeaderRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowrariCommonOutboundFileHeaderRow);
            return rowrariCommonOutboundFileHeaderRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            rariCommonOutboundFileHeaderDataTable cln = ((rariCommonOutboundFileHeaderDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new rariCommonOutboundFileHeaderDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnoutboundFileIdentifier = base.Columns["outboundFileIdentifier"];
            this.columncmsBatchIdentifier = base.Columns["cmsBatchIdentifier"];
            this.columncmsJobIdentifier = base.Columns["cmsJobIdentifier"];
            this.columnsnapShotFileName = base.Columns["snapShotFileName"];
            this.columnsnapShotFileHash = base.Columns["snapShotFileHash"];
            this.columnoutboundFileGenerationDateTime = base.Columns["outboundFileGenerationDateTime"];
            this.columninterfaceControlReleaseNumber = base.Columns["interfaceControlReleaseNumber"];
            this.columnedgeServerVersion = base.Columns["edgeServerVersion"];
            this.columnedgeServerProcessIdentifier = base.Columns["edgeServerProcessIdentifier"];
            this.columnoutboundFileTypeCode = base.Columns["outboundFileTypeCode"];
            this.columnedgeServerIdentifier = base.Columns["edgeServerIdentifier"];
            this.columnissuerIdentifier = base.Columns["issuerIdentifier"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnoutboundFileIdentifier = new global::System.Data.DataColumn("outboundFileIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnoutboundFileIdentifier);
            this.columncmsBatchIdentifier = new global::System.Data.DataColumn("cmsBatchIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmsBatchIdentifier);
            this.columncmsJobIdentifier = new global::System.Data.DataColumn("cmsJobIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmsJobIdentifier);
            this.columnsnapShotFileName = new global::System.Data.DataColumn("snapShotFileName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsnapShotFileName);
            this.columnsnapShotFileHash = new global::System.Data.DataColumn("snapShotFileHash", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsnapShotFileHash);
            this.columnoutboundFileGenerationDateTime = new global::System.Data.DataColumn("outboundFileGenerationDateTime", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnoutboundFileGenerationDateTime);
            this.columninterfaceControlReleaseNumber = new global::System.Data.DataColumn("interfaceControlReleaseNumber", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columninterfaceControlReleaseNumber);
            this.columnedgeServerVersion = new global::System.Data.DataColumn("edgeServerVersion", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnedgeServerVersion);
            this.columnedgeServerProcessIdentifier = new global::System.Data.DataColumn("edgeServerProcessIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnedgeServerProcessIdentifier);
            this.columnoutboundFileTypeCode = new global::System.Data.DataColumn("outboundFileTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnoutboundFileTypeCode);
            this.columnedgeServerIdentifier = new global::System.Data.DataColumn("edgeServerIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnedgeServerIdentifier);
            this.columnissuerIdentifier = new global::System.Data.DataColumn("issuerIdentifier", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnissuerIdentifier);
            this.columnoutboundFileIdentifier.AllowDBNull = false;
            this.columnoutboundFileIdentifier.MaxLength = 80;
            this.columncmsBatchIdentifier.AllowDBNull = false;
            this.columncmsBatchIdentifier.MaxLength = 50;
            this.columncmsJobIdentifier.AllowDBNull = false;
            this.columncmsJobIdentifier.MaxLength = 50;
            this.columnsnapShotFileName.AllowDBNull = false;
            this.columnsnapShotFileHash.AllowDBNull = false;
            this.columnoutboundFileGenerationDateTime.AllowDBNull = false;
            this.columninterfaceControlReleaseNumber.AllowDBNull = false;
            this.columnedgeServerVersion.AllowDBNull = false;
            this.columnedgeServerVersion.MaxLength = 75;
            this.columnedgeServerProcessIdentifier.MaxLength = 12;
            this.columnoutboundFileTypeCode.AllowDBNull = false;
            this.columnoutboundFileTypeCode.MaxLength = 30;
            this.columnedgeServerIdentifier.AllowDBNull = false;
            this.columnedgeServerIdentifier.MaxLength = 12;
            this.columnissuerIdentifier.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public rariCommonOutboundFileHeaderRow NewrariCommonOutboundFileHeaderRow() {
            return ((rariCommonOutboundFileHeaderRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new rariCommonOutboundFileHeaderRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(rariCommonOutboundFileHeaderRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.rariCommonOutboundFileHeaderRowChanged != null)) {
                this.rariCommonOutboundFileHeaderRowChanged(this, new rariCommonOutboundFileHeaderRowChangeEvent(((rariCommonOutboundFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.rariCommonOutboundFileHeaderRowChanging != null)) {
                this.rariCommonOutboundFileHeaderRowChanging(this, new rariCommonOutboundFileHeaderRowChangeEvent(((rariCommonOutboundFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.rariCommonOutboundFileHeaderRowDeleted != null)) {
                this.rariCommonOutboundFileHeaderRowDeleted(this, new rariCommonOutboundFileHeaderRowChangeEvent(((rariCommonOutboundFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.rariCommonOutboundFileHeaderRowDeleting != null)) {
                this.rariCommonOutboundFileHeaderRowDeleting(this, new rariCommonOutboundFileHeaderRowChangeEvent(((rariCommonOutboundFileHeaderRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoverariCommonOutboundFileHeaderRow(rariCommonOutboundFileHeaderRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "rariCommonOutboundFileHeaderDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class claimEnrolleeFrequencyReportRow : global::System.Data.DataRow {
        
        private claimEnrolleeFrequencyReportDataTable tableclaimEnrolleeFrequencyReport;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal claimEnrolleeFrequencyReportRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableclaimEnrolleeFrequencyReport = ((claimEnrolleeFrequencyReportDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string calendarYear {
            get {
                return ((string)(this[this.tableclaimEnrolleeFrequencyReport.calendarYearColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.calendarYearColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string issuerLegalName {
            get {
                return ((string)(this[this.tableclaimEnrolleeFrequencyReport.issuerLegalNameColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.issuerLegalNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string state {
            get {
                return ((string)(this[this.tableclaimEnrolleeFrequencyReport.stateColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.stateColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalEnrollees {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleesColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleesColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalEnrolleeUtilizers {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleeUtilizersColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleeUtilizersColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long maleEnrolleeUtilizers {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.maleEnrolleeUtilizersColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.maleEnrolleeUtilizersColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long femaleEnrolleeUtilizers {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.femaleEnrolleeUtilizersColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.femaleEnrolleeUtilizersColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalClaims {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.totalClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalEnrolleesWithMedicalClaims {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleesWithMedicalClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleesWithMedicalClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalEnrolleesWithPharmacyClaims {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleesWithPharmacyClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalEnrolleesWithPharmacyClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long numberOfEnrolleesWithMedicalPharmacyClaims {
            get {
                return ((long)(this[this.tableclaimEnrolleeFrequencyReport.numberOfEnrolleesWithMedicalPharmacyClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.numberOfEnrolleesWithMedicalPharmacyClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForAllClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForAllClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForAllClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForInpatientClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForInpatientClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForInpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForOutpatientClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForOutpatientClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForOutpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForProfessionalClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForProfessionalClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForProfessionalClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForPharmacyClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForPharmacyClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForPharmacyClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPaidAmountForAllClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForAllClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForAllClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPaidAmountForInpatientClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForInpatientClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForInpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPaidAmountForOutpatientClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForOutpatientClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForOutpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPaidAmountForProfessionalClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForProfessionalClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForProfessionalClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPaidAmountForPharmacyClaims {
            get {
                return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForPharmacyClaimsColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPaidAmountForPharmacyClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForRaInpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaInpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalAllowedCostForRaInpatientClaims\' in table \'claimEnroll" +
                            "eeFrequencyReport\' is DBNull.", e);
                }
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaInpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForRaOutpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaOutpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalAllowedCostForRaOutpatientClaims\' in table \'claimEnrol" +
                            "leeFrequencyReport\' is DBNull.", e);
                }
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaOutpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPlanPaidAmountForRaInpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaInpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalPlanPaidAmountForRaInpatientClaims\' in table \'claimEnr" +
                            "olleeFrequencyReport\' is DBNull.", e);
                }
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaInpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPlanPaidAmountForRaOutpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaOutpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalPlanPaidAmountForRaOutpatientClaims\' in table \'claimEn" +
                            "rolleeFrequencyReport\' is DBNull.", e);
                }
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaOutpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int claimEnrolleeFrequencyReport_Id {
            get {
                return ((int)(this[this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn]));
            }
            set {
                this[this.tableclaimEnrolleeFrequencyReport.claimEnrolleeFrequencyReport_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalAllowedCostForRaInpatientClaimsNull() {
            return this.IsNull(this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaInpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalAllowedCostForRaInpatientClaimsNull() {
            this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaInpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalAllowedCostForRaOutpatientClaimsNull() {
            return this.IsNull(this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaOutpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalAllowedCostForRaOutpatientClaimsNull() {
            this[this.tableclaimEnrolleeFrequencyReport.totalAllowedCostForRaOutpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalPlanPaidAmountForRaInpatientClaimsNull() {
            return this.IsNull(this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaInpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalPlanPaidAmountForRaInpatientClaimsNull() {
            this[this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaInpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalPlanPaidAmountForRaOutpatientClaimsNull() {
            return this.IsNull(this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaOutpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalPlanPaidAmountForRaOutpatientClaimsNull() {
            this[this.tableclaimEnrolleeFrequencyReport.totalPlanPaidAmountForRaOutpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderRow[] GetincludedFileHeaderRows() {
            if ((this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedFileHeader"] == null)) {
                return new includedFileHeaderRow[0];
            }
            else {
                return ((includedFileHeaderRow[])(base.GetChildRows(this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedFileHeader"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryRow[] GetincludedFileCountsCategoryRows() {
            if ((this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedFileCountsCategory"] == null)) {
                return new includedFileCountsCategoryRow[0];
            }
            else {
                return ((includedFileCountsCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedFileCountsCategory"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow[] GetincludedPlanCategoryRows() {
            if ((this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedPlanCategory"] == null)) {
                return new includedPlanCategoryRow[0];
            }
            else {
                return ((includedPlanCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedPlanCategory"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow[] GetincludedClaimCategoryRows() {
            if ((this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedClaimCategory"] == null)) {
                return new includedClaimCategoryRow[0];
            }
            else {
                return ((includedClaimCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["claimEnrolleeFrequencyReport_includedClaimCategory"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class includedFileHeaderRow : global::System.Data.DataRow {
        
        private includedFileHeaderDataTable tableincludedFileHeader;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedFileHeaderRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableincludedFileHeader = ((includedFileHeaderDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string outboundFileIdentifier {
            get {
                return ((string)(this[this.tableincludedFileHeader.outboundFileIdentifierColumn]));
            }
            set {
                this[this.tableincludedFileHeader.outboundFileIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string cmsBatchIdentifier {
            get {
                return ((string)(this[this.tableincludedFileHeader.cmsBatchIdentifierColumn]));
            }
            set {
                this[this.tableincludedFileHeader.cmsBatchIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string cmsJobIdentifier {
            get {
                return ((string)(this[this.tableincludedFileHeader.cmsJobIdentifierColumn]));
            }
            set {
                this[this.tableincludedFileHeader.cmsJobIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string snapShotFileName {
            get {
                return ((string)(this[this.tableincludedFileHeader.snapShotFileNameColumn]));
            }
            set {
                this[this.tableincludedFileHeader.snapShotFileNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string snapShotFileHash {
            get {
                return ((string)(this[this.tableincludedFileHeader.snapShotFileHashColumn]));
            }
            set {
                this[this.tableincludedFileHeader.snapShotFileHashColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string outboundFileGenerationDateTime {
            get {
                return ((string)(this[this.tableincludedFileHeader.outboundFileGenerationDateTimeColumn]));
            }
            set {
                this[this.tableincludedFileHeader.outboundFileGenerationDateTimeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string interfaceControlReleaseNumber {
            get {
                return ((string)(this[this.tableincludedFileHeader.interfaceControlReleaseNumberColumn]));
            }
            set {
                this[this.tableincludedFileHeader.interfaceControlReleaseNumberColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string edgeServerVersion {
            get {
                return ((string)(this[this.tableincludedFileHeader.edgeServerVersionColumn]));
            }
            set {
                this[this.tableincludedFileHeader.edgeServerVersionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string edgeServerProcessIdentifier {
            get {
                try {
                    return ((string)(this[this.tableincludedFileHeader.edgeServerProcessIdentifierColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'edgeServerProcessIdentifier\' in table \'includedFileHeader\' " +
                            "is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFileHeader.edgeServerProcessIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string outboundFileTypeCode {
            get {
                return ((string)(this[this.tableincludedFileHeader.outboundFileTypeCodeColumn]));
            }
            set {
                this[this.tableincludedFileHeader.outboundFileTypeCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string edgeServerIdentifier {
            get {
                return ((string)(this[this.tableincludedFileHeader.edgeServerIdentifierColumn]));
            }
            set {
                this[this.tableincludedFileHeader.edgeServerIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string issuerIdentifier {
            get {
                return ((string)(this[this.tableincludedFileHeader.issuerIdentifierColumn]));
            }
            set {
                this[this.tableincludedFileHeader.issuerIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int claimEnrolleeFrequencyReport_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedFileHeader.claimEnrolleeFrequencyReport_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'claimEnrolleeFrequencyReport_Id\' in table \'includedFileHead" +
                            "er\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFileHeader.claimEnrolleeFrequencyReport_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow claimEnrolleeFrequencyReportRow {
            get {
                return ((claimEnrolleeFrequencyReportRow)(this.GetParentRow(this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedFileHeader"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedFileHeader"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsedgeServerProcessIdentifierNull() {
            return this.IsNull(this.tableincludedFileHeader.edgeServerProcessIdentifierColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetedgeServerProcessIdentifierNull() {
            this[this.tableincludedFileHeader.edgeServerProcessIdentifierColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsclaimEnrolleeFrequencyReport_IdNull() {
            return this.IsNull(this.tableincludedFileHeader.claimEnrolleeFrequencyReport_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetclaimEnrolleeFrequencyReport_IdNull() {
            this[this.tableincludedFileHeader.claimEnrolleeFrequencyReport_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class includedFileCountsCategoryRow : global::System.Data.DataRow {
        
        private includedFileCountsCategoryDataTable tableincludedFileCountsCategory;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedFileCountsCategoryRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableincludedFileCountsCategory = ((includedFileCountsCategoryDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string fileType {
            get {
                return ((string)(this[this.tableincludedFileCountsCategory.fileTypeColumn]));
            }
            set {
                this[this.tableincludedFileCountsCategory.fileTypeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalNumberFilesReceived {
            get {
                return ((long)(this[this.tableincludedFileCountsCategory.totalNumberFilesReceivedColumn]));
            }
            set {
                this[this.tableincludedFileCountsCategory.totalNumberFilesReceivedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalNumberFilesAccepted {
            get {
                return ((long)(this[this.tableincludedFileCountsCategory.totalNumberFilesAcceptedColumn]));
            }
            set {
                this[this.tableincludedFileCountsCategory.totalNumberFilesAcceptedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalNumberFilesRejected {
            get {
                return ((long)(this[this.tableincludedFileCountsCategory.totalNumberFilesRejectedColumn]));
            }
            set {
                this[this.tableincludedFileCountsCategory.totalNumberFilesRejectedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int claimEnrolleeFrequencyReport_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedFileCountsCategory.claimEnrolleeFrequencyReport_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'claimEnrolleeFrequencyReport_Id\' in table \'includedFileCoun" +
                            "tsCategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFileCountsCategory.claimEnrolleeFrequencyReport_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow claimEnrolleeFrequencyReportRow {
            get {
                return ((claimEnrolleeFrequencyReportRow)(this.GetParentRow(this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedFileCountsCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedFileCountsCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsclaimEnrolleeFrequencyReport_IdNull() {
            return this.IsNull(this.tableincludedFileCountsCategory.claimEnrolleeFrequencyReport_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetclaimEnrolleeFrequencyReport_IdNull() {
            this[this.tableincludedFileCountsCategory.claimEnrolleeFrequencyReport_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class includedPlanCategoryRow : global::System.Data.DataRow {
        
        private includedPlanCategoryDataTable tableincludedPlanCategory;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedPlanCategoryRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableincludedPlanCategory = ((includedPlanCategoryDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string planIdentifier {
            get {
                return ((string)(this[this.tableincludedPlanCategory.planIdentifierColumn]));
            }
            set {
                this[this.tableincludedPlanCategory.planIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedPlanCategory_Id {
            get {
                return ((int)(this[this.tableincludedPlanCategory.includedPlanCategory_IdColumn]));
            }
            set {
                this[this.tableincludedPlanCategory.includedPlanCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int claimEnrolleeFrequencyReport_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedPlanCategory.claimEnrolleeFrequencyReport_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'claimEnrolleeFrequencyReport_Id\' in table \'includedPlanCate" +
                            "gory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedPlanCategory.claimEnrolleeFrequencyReport_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow claimEnrolleeFrequencyReportRow {
            get {
                return ((claimEnrolleeFrequencyReportRow)(this.GetParentRow(this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedPlanCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedPlanCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsclaimEnrolleeFrequencyReport_IdNull() {
            return this.IsNull(this.tableincludedPlanCategory.claimEnrolleeFrequencyReport_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetclaimEnrolleeFrequencyReport_IdNull() {
            this[this.tableincludedPlanCategory.claimEnrolleeFrequencyReport_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow[] GetincludedClaimCategoryRows() {
            if ((this.Table.ChildRelations["includedPlanCategory_includedClaimCategory"] == null)) {
                return new includedClaimCategoryRow[0];
            }
            else {
                return ((includedClaimCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["includedPlanCategory_includedClaimCategory"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRow[] GetincludedCalendarMonthCategoryRows() {
            if ((this.Table.ChildRelations["includedPlanCategory_includedCalendarMonthCategory"] == null)) {
                return new includedCalendarMonthCategoryRow[0];
            }
            else {
                return ((includedCalendarMonthCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["includedPlanCategory_includedCalendarMonthCategory"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class includedClaimCategoryRow : global::System.Data.DataRow {
        
        private includedClaimCategoryDataTable tableincludedClaimCategory;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedClaimCategoryRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableincludedClaimCategory = ((includedClaimCategoryDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string claimType {
            get {
                return ((string)(this[this.tableincludedClaimCategory.claimTypeColumn]));
            }
            set {
                this[this.tableincludedClaimCategory.claimTypeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long countofTotalActiveClaims {
            get {
                return ((long)(this[this.tableincludedClaimCategory.countofTotalActiveClaimsColumn]));
            }
            set {
                this[this.tableincludedClaimCategory.countofTotalActiveClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long countofTotalInactiveVoidClaims {
            get {
                return ((long)(this[this.tableincludedClaimCategory.countofTotalInactiveVoidClaimsColumn]));
            }
            set {
                this[this.tableincludedClaimCategory.countofTotalInactiveVoidClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalClaimRecordsAccepted {
            get {
                return ((long)(this[this.tableincludedClaimCategory.totalClaimRecordsAcceptedColumn]));
            }
            set {
                this[this.tableincludedClaimCategory.totalClaimRecordsAcceptedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long uniqueClaimRecordsResolved {
            get {
                try {
                    return ((long)(this[this.tableincludedClaimCategory.uniqueClaimRecordsResolvedColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'uniqueClaimRecordsResolved\' in table \'includedClaimCategory" +
                            "\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.uniqueClaimRecordsResolvedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long totalClaimLinesAccepted {
            get {
                try {
                    return ((long)(this[this.tableincludedClaimCategory.totalClaimLinesAcceptedColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalClaimLinesAccepted\' in table \'includedClaimCategory\' i" +
                            "s DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.totalClaimLinesAcceptedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForRaInpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableincludedClaimCategory.totalAllowedCostForRaInpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalAllowedCostForRaInpatientClaims\' in table \'includedCla" +
                            "imCategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.totalAllowedCostForRaInpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalAllowedCostForRaOutpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableincludedClaimCategory.totalAllowedCostForRaOutpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalAllowedCostForRaOutpatientClaims\' in table \'includedCl" +
                            "aimCategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.totalAllowedCostForRaOutpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPlanPaidAmountForRaInpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableincludedClaimCategory.totalPlanPaidAmountForRaInpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalPlanPaidAmountForRaInpatientClaims\' in table \'included" +
                            "ClaimCategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.totalPlanPaidAmountForRaInpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public decimal totalPlanPaidAmountForRaOutpatientClaims {
            get {
                try {
                    return ((decimal)(this[this.tableincludedClaimCategory.totalPlanPaidAmountForRaOutpatientClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'totalPlanPaidAmountForRaOutpatientClaims\' in table \'include" +
                            "dClaimCategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.totalPlanPaidAmountForRaOutpatientClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedClaimCategory_Id {
            get {
                return ((int)(this[this.tableincludedClaimCategory.includedClaimCategory_IdColumn]));
            }
            set {
                this[this.tableincludedClaimCategory.includedClaimCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedCalendarMonthCategory_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedClaimCategory.includedCalendarMonthCategory_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'includedCalendarMonthCategory_Id\' in table \'includedClaimCa" +
                            "tegory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.includedCalendarMonthCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedPlanCategory_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedClaimCategory.includedPlanCategory_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'includedPlanCategory_Id\' in table \'includedClaimCategory\' i" +
                            "s DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.includedPlanCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int claimEnrolleeFrequencyReport_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedClaimCategory.claimEnrolleeFrequencyReport_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'claimEnrolleeFrequencyReport_Id\' in table \'includedClaimCat" +
                            "egory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedClaimCategory.claimEnrolleeFrequencyReport_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRow includedCalendarMonthCategoryRow {
            get {
                return ((includedCalendarMonthCategoryRow)(this.GetParentRow(this.Table.ParentRelations["includedCalendarMonthCategory_includedClaimCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["includedCalendarMonthCategory_includedClaimCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow includedPlanCategoryRow {
            get {
                return ((includedPlanCategoryRow)(this.GetParentRow(this.Table.ParentRelations["includedPlanCategory_includedClaimCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["includedPlanCategory_includedClaimCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow claimEnrolleeFrequencyReportRow {
            get {
                return ((claimEnrolleeFrequencyReportRow)(this.GetParentRow(this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedClaimCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["claimEnrolleeFrequencyReport_includedClaimCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsuniqueClaimRecordsResolvedNull() {
            return this.IsNull(this.tableincludedClaimCategory.uniqueClaimRecordsResolvedColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetuniqueClaimRecordsResolvedNull() {
            this[this.tableincludedClaimCategory.uniqueClaimRecordsResolvedColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalClaimLinesAcceptedNull() {
            return this.IsNull(this.tableincludedClaimCategory.totalClaimLinesAcceptedColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalClaimLinesAcceptedNull() {
            this[this.tableincludedClaimCategory.totalClaimLinesAcceptedColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalAllowedCostForRaInpatientClaimsNull() {
            return this.IsNull(this.tableincludedClaimCategory.totalAllowedCostForRaInpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalAllowedCostForRaInpatientClaimsNull() {
            this[this.tableincludedClaimCategory.totalAllowedCostForRaInpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalAllowedCostForRaOutpatientClaimsNull() {
            return this.IsNull(this.tableincludedClaimCategory.totalAllowedCostForRaOutpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalAllowedCostForRaOutpatientClaimsNull() {
            this[this.tableincludedClaimCategory.totalAllowedCostForRaOutpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalPlanPaidAmountForRaInpatientClaimsNull() {
            return this.IsNull(this.tableincludedClaimCategory.totalPlanPaidAmountForRaInpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalPlanPaidAmountForRaInpatientClaimsNull() {
            this[this.tableincludedClaimCategory.totalPlanPaidAmountForRaInpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IstotalPlanPaidAmountForRaOutpatientClaimsNull() {
            return this.IsNull(this.tableincludedClaimCategory.totalPlanPaidAmountForRaOutpatientClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SettotalPlanPaidAmountForRaOutpatientClaimsNull() {
            this[this.tableincludedClaimCategory.totalPlanPaidAmountForRaOutpatientClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsincludedCalendarMonthCategory_IdNull() {
            return this.IsNull(this.tableincludedClaimCategory.includedCalendarMonthCategory_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetincludedCalendarMonthCategory_IdNull() {
            this[this.tableincludedClaimCategory.includedCalendarMonthCategory_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsincludedPlanCategory_IdNull() {
            return this.IsNull(this.tableincludedClaimCategory.includedPlanCategory_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetincludedPlanCategory_IdNull() {
            this[this.tableincludedClaimCategory.includedPlanCategory_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsclaimEnrolleeFrequencyReport_IdNull() {
            return this.IsNull(this.tableincludedClaimCategory.claimEnrolleeFrequencyReport_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetclaimEnrolleeFrequencyReport_IdNull() {
            this[this.tableincludedClaimCategory.claimEnrolleeFrequencyReport_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryRow[] GetincludedFormTypeCategoryRows() {
            if ((this.Table.ChildRelations["includedClaimCategory_includedFormTypeCategory"] == null)) {
                return new includedFormTypeCategoryRow[0];
            }
            else {
                return ((includedFormTypeCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["includedClaimCategory_includedFormTypeCategory"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class includedFormTypeCategoryRow : global::System.Data.DataRow {
        
        private includedFormTypeCategoryDataTable tableincludedFormTypeCategory;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedFormTypeCategoryRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableincludedFormTypeCategory = ((includedFormTypeCategoryDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string formType {
            get {
                try {
                    return ((string)(this[this.tableincludedFormTypeCategory.formTypeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'formType\' in table \'includedFormTypeCategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFormTypeCategory.formTypeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long countofTotalActiveClaims {
            get {
                try {
                    return ((long)(this[this.tableincludedFormTypeCategory.countofTotalActiveClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'countofTotalActiveClaims\' in table \'includedFormTypeCategor" +
                            "y\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFormTypeCategory.countofTotalActiveClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public long countofTotalInactiveVoidClaims {
            get {
                try {
                    return ((long)(this[this.tableincludedFormTypeCategory.countofTotalInactiveVoidClaimsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'countofTotalInactiveVoidClaims\' in table \'includedFormTypeC" +
                            "ategory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFormTypeCategory.countofTotalInactiveVoidClaimsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedClaimCategory_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedFormTypeCategory.includedClaimCategory_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'includedClaimCategory_Id\' in table \'includedFormTypeCategor" +
                            "y\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedFormTypeCategory.includedClaimCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow includedClaimCategoryRow {
            get {
                return ((includedClaimCategoryRow)(this.GetParentRow(this.Table.ParentRelations["includedClaimCategory_includedFormTypeCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["includedClaimCategory_includedFormTypeCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsformTypeNull() {
            return this.IsNull(this.tableincludedFormTypeCategory.formTypeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetformTypeNull() {
            this[this.tableincludedFormTypeCategory.formTypeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IscountofTotalActiveClaimsNull() {
            return this.IsNull(this.tableincludedFormTypeCategory.countofTotalActiveClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetcountofTotalActiveClaimsNull() {
            this[this.tableincludedFormTypeCategory.countofTotalActiveClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IscountofTotalInactiveVoidClaimsNull() {
            return this.IsNull(this.tableincludedFormTypeCategory.countofTotalInactiveVoidClaimsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetcountofTotalInactiveVoidClaimsNull() {
            this[this.tableincludedFormTypeCategory.countofTotalInactiveVoidClaimsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsincludedClaimCategory_IdNull() {
            return this.IsNull(this.tableincludedFormTypeCategory.includedClaimCategory_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetincludedClaimCategory_IdNull() {
            this[this.tableincludedFormTypeCategory.includedClaimCategory_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class includedCalendarMonthCategoryRow : global::System.Data.DataRow {
        
        private includedCalendarMonthCategoryDataTable tableincludedCalendarMonthCategory;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal includedCalendarMonthCategoryRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableincludedCalendarMonthCategory = ((includedCalendarMonthCategoryDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string calendarMonth {
            get {
                return ((string)(this[this.tableincludedCalendarMonthCategory.calendarMonthColumn]));
            }
            set {
                this[this.tableincludedCalendarMonthCategory.calendarMonthColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedCalendarMonthCategory_Id {
            get {
                return ((int)(this[this.tableincludedCalendarMonthCategory.includedCalendarMonthCategory_IdColumn]));
            }
            set {
                this[this.tableincludedCalendarMonthCategory.includedCalendarMonthCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int includedPlanCategory_Id {
            get {
                try {
                    return ((int)(this[this.tableincludedCalendarMonthCategory.includedPlanCategory_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'includedPlanCategory_Id\' in table \'includedCalendarMonthCat" +
                            "egory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableincludedCalendarMonthCategory.includedPlanCategory_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow includedPlanCategoryRow {
            get {
                return ((includedPlanCategoryRow)(this.GetParentRow(this.Table.ParentRelations["includedPlanCategory_includedCalendarMonthCategory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["includedPlanCategory_includedCalendarMonthCategory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsincludedPlanCategory_IdNull() {
            return this.IsNull(this.tableincludedCalendarMonthCategory.includedPlanCategory_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetincludedPlanCategory_IdNull() {
            this[this.tableincludedCalendarMonthCategory.includedPlanCategory_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow[] GetincludedClaimCategoryRows() {
            if ((this.Table.ChildRelations["includedCalendarMonthCategory_includedClaimCategory"] == null)) {
                return new includedClaimCategoryRow[0];
            }
            else {
                return ((includedClaimCategoryRow[])(base.GetChildRows(this.Table.ChildRelations["includedCalendarMonthCategory_includedClaimCategory"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class rariCommonOutboundFileHeaderRow : global::System.Data.DataRow {
        
        private rariCommonOutboundFileHeaderDataTable tablerariCommonOutboundFileHeader;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal rariCommonOutboundFileHeaderRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablerariCommonOutboundFileHeader = ((rariCommonOutboundFileHeaderDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string outboundFileIdentifier {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.outboundFileIdentifierColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.outboundFileIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string cmsBatchIdentifier {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.cmsBatchIdentifierColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.cmsBatchIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string cmsJobIdentifier {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.cmsJobIdentifierColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.cmsJobIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string snapShotFileName {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.snapShotFileNameColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.snapShotFileNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string snapShotFileHash {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.snapShotFileHashColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.snapShotFileHashColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string outboundFileGenerationDateTime {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.outboundFileGenerationDateTimeColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.outboundFileGenerationDateTimeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string interfaceControlReleaseNumber {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.interfaceControlReleaseNumberColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.interfaceControlReleaseNumberColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string edgeServerVersion {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.edgeServerVersionColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.edgeServerVersionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string edgeServerProcessIdentifier {
            get {
                try {
                    return ((string)(this[this.tablerariCommonOutboundFileHeader.edgeServerProcessIdentifierColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'edgeServerProcessIdentifier\' in table \'rariCommonOutboundFi" +
                            "leHeader\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.edgeServerProcessIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string outboundFileTypeCode {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.outboundFileTypeCodeColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.outboundFileTypeCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string edgeServerIdentifier {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.edgeServerIdentifierColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.edgeServerIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string issuerIdentifier {
            get {
                return ((string)(this[this.tablerariCommonOutboundFileHeader.issuerIdentifierColumn]));
            }
            set {
                this[this.tablerariCommonOutboundFileHeader.issuerIdentifierColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsedgeServerProcessIdentifierNull() {
            return this.IsNull(this.tablerariCommonOutboundFileHeader.edgeServerProcessIdentifierColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetedgeServerProcessIdentifierNull() {
            this[this.tablerariCommonOutboundFileHeader.edgeServerProcessIdentifierColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class claimEnrolleeFrequencyReportRowChangeEvent : global::System.EventArgs {
        
        private claimEnrolleeFrequencyReportRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRowChangeEvent(claimEnrolleeFrequencyReportRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public claimEnrolleeFrequencyReportRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class includedFileHeaderRowChangeEvent : global::System.EventArgs {
        
        private includedFileHeaderRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderRowChangeEvent(includedFileHeaderRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileHeaderRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class includedFileCountsCategoryRowChangeEvent : global::System.EventArgs {
        
        private includedFileCountsCategoryRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryRowChangeEvent(includedFileCountsCategoryRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFileCountsCategoryRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class includedPlanCategoryRowChangeEvent : global::System.EventArgs {
        
        private includedPlanCategoryRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRowChangeEvent(includedPlanCategoryRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedPlanCategoryRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class includedClaimCategoryRowChangeEvent : global::System.EventArgs {
        
        private includedClaimCategoryRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRowChangeEvent(includedClaimCategoryRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedClaimCategoryRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class includedFormTypeCategoryRowChangeEvent : global::System.EventArgs {
        
        private includedFormTypeCategoryRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryRowChangeEvent(includedFormTypeCategoryRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedFormTypeCategoryRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class includedCalendarMonthCategoryRowChangeEvent : global::System.EventArgs {
        
        private includedCalendarMonthCategoryRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRowChangeEvent(includedCalendarMonthCategoryRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public includedCalendarMonthCategoryRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class rariCommonOutboundFileHeaderRowChangeEvent : global::System.EventArgs {
        
        private rariCommonOutboundFileHeaderRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public rariCommonOutboundFileHeaderRowChangeEvent(rariCommonOutboundFileHeaderRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public rariCommonOutboundFileHeaderRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
